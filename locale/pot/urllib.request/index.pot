# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/urllib.request/index.rst:3
# b5a31b0446ad4baabd099fc506e2bb71
msgid "urllib.request --- Network Resource Access"
msgstr ""

#: ../../source/urllib.request/index.rst:8
# d41514d198fa4fc29472a78fa6b82f68
msgid "A library for opening URLs that can be extended by defining custom protocol handlers."
msgstr ""

#: ../../source/urllib.request/index.rst:11
# ce1f1b35616a43cd8f9d9b3aeac85008
msgid "The ``urllib.request`` module provides an API for using Internet resources identified by URLs.  It is designed to be extended by individual applications to support new protocols or add variations to existing protocols (such as handling HTTP basic authentication)."
msgstr ""

#: ../../source/urllib.request/index.rst:17
# 8128f177b3424b41929e0c0b93985e68
msgid "HTTP GET"
msgstr ""

#: ../../source/urllib.request/index.rst:21
# 38fd1abd401b45e8b9bfa1a37f60bd0f
msgid "The test server for these examples is in ``http_server_GET.py``, from the examples for the :mod:`http.server` module. Start the server in one terminal window, then run these examples in another."
msgstr ""

#: ../../source/urllib.request/index.rst:25
# 431c36c3fe0e4c6b98499bd915a75f15
msgid "An HTTP GET operation is the simplest use of ``urllib.request``. Pass the URL to ``urlopen()`` to get a \"file-like\" handle to the remote data."
msgstr ""

#: ../../source/urllib.request/index.rst:0
# 6b3be387b5e9433d9ef0ee23da796e04
msgid "urllib_request_urlopen.py"
msgstr ""

#: ../../source/urllib.request/index.rst:33
# 52e3f8b8bd9d40fe8755a024b67bd200
msgid "The example server accepts the incoming values and formats a plain text response to send back. The return value from ``urlopen()`` gives access to the headers from the HTTP server through the ``info()`` method, and the data for the remote resource via methods like ``read()`` and ``readlines()``."
msgstr ""

#: ../../source/urllib.request/index.rst:76
# 0ee14082d5c745639cf798413a98647a
msgid "The file-like object returned by ``urlopen()`` is iterable:"
msgstr ""

#: ../../source/urllib.request/index.rst:0
# f6a52ee8b7a248f794fe58f0eec3c52f
msgid "urllib_request_urlopen_iterator.py"
msgstr ""

#: ../../source/urllib.request/index.rst:82
# d3d03ebbd6ea4d1496072d3898f95b94
msgid "This example strips the trailing newlines and carriage returns before printing the output."
msgstr ""

#: ../../source/urllib.request/index.rst:109
# 151b460e938a4b7988112b24432d1c58
msgid "Encoding Arguments"
msgstr ""

#: ../../source/urllib.request/index.rst:111
# 41615185e33c4755a256cd8daf929489
msgid "Arguments can be passed to the server by encoding them with ``urllib.parse.urlencode()`` and appending them to the URL."
msgstr ""

#: ../../source/urllib.request/index.rst:0
# a1ecd991472945d6afa6f99b952c0bee
msgid "urllib_request_http_get_args.py"
msgstr ""

#: ../../source/urllib.request/index.rst:118
# 674de7fc71564304b9010f30d0653cdb
msgid "The list of client values returned in the example output contains the encoded query arguments."
msgstr ""

#: ../../source/urllib.request/index.rst:146
# 04e73b55a6cb426ba465beb16f5dc8ab
msgid "HTTP POST"
msgstr ""

#: ../../source/urllib.request/index.rst:150
# d4319256e2eb45148e2ff0dd76a06eb1
msgid "The test server for these examples is in ``http_server_POST.py``, from the examples for the :mod:`http.server` module. Start the server in one terminal window, then run these examples in another."
msgstr ""

#: ../../source/urllib.request/index.rst:154
# 664e9b6b7bcc47968e59c24525b47fa9
msgid "To send form-encoded data to the remote server using POST instead GET, pass the encoded query arguments as data to ``urlopen()``."
msgstr ""

#: ../../source/urllib.request/index.rst:0
# b7d51820e70e452a84dc5567dd711db8
msgid "urllib_request_urlopen_post.py"
msgstr ""

#: ../../source/urllib.request/index.rst:161
# d782cf793ebf42689b6034f9a1b34ee3
msgid "The server can decode the form data and access the individual values by name."
msgstr ""

#: ../../source/urllib.request/index.rst:176
# e90e1c622a734bfc933eb313220bc939
msgid "Adding Outgoing Headers"
msgstr ""

#: ../../source/urllib.request/index.rst:178
# 92fc4bbe7ca34e46870c35d8776cf0b7
msgid "``urlopen()`` is a convenience function that hides some of the details of how the request is made and handled. More precise control is possible by using a ``Request`` instance directly.  For example, custom headers can be added to the outgoing request to control the format of data returned, specify the version of a document cached locally, and tell the remote server the name of the software client communicating with it."
msgstr ""

#: ../../source/urllib.request/index.rst:186
# d36bf0c0463543f4bf372c3dfb16ce3c
msgid "As the output from the earlier examples shows, the default *User-agent* header value is made up of the constant ``Python-urllib``, followed by the Python interpreter version. When creating an application that will access web resources owned by someone else, it is courteous to include real user agent information in the requests, so they can identify the source of the hits more easily. Using a custom agent also allows them to control crawlers using a ``robots.txt`` file (see the :mod:`http.robotparser` module)."
msgstr ""

#: ../../source/urllib.request/index.rst:0
# 2392655224f04b0d93e8255d0e04849c
msgid "urllib_request_request_header.py"
msgstr ""

#: ../../source/urllib.request/index.rst:199
# aeb7544059344ca3af8a11e9b38b99a5
msgid "After creating a ``Request`` object, use ``add_header()`` to set the user agent value before opening the request.  The last line of the output shows the custom value."
msgstr ""

#: ../../source/urllib.request/index.rst:227
# 819457841f7c46039d1ba50666ec0b01
msgid "Posting Form Data from a Request"
msgstr ""

#: ../../source/urllib.request/index.rst:229
# 10b7405ccaf44309917c9672563c1335
msgid "The outgoing data can be specified when building the ``Request`` to have it posted to the server."
msgstr ""

#: ../../source/urllib.request/index.rst:0
# 94ba204a194744948cd05aca27950446
msgid "urllib_request_request_post.py"
msgstr ""

#: ../../source/urllib.request/index.rst:236
# 45b7a6cb91274e099b04f1c1930fe2b0
msgid "The HTTP method used by the ``Request`` changes from GET to POST automatically after the data is added."
msgstr ""

#: ../../source/urllib.request/index.rst:257
# 2eae7735ee264a3983c7d765c70d86df
msgid "Uploading Files"
msgstr ""

#: ../../source/urllib.request/index.rst:259
# 8b8361d4e071454bb5099bc3d9c8a601
msgid "Encoding files for upload requires a little more work than simple forms.  A complete MIME message needs to be constructed in the body of the request, so that the server can distinguish incoming form fields from uploaded files."
msgstr ""

#: ../../source/urllib.request/index.rst:0
# cc253d0d851d4fec9fdde7b5983931ab
msgid "urllib_request_upload_files.py"
msgstr ""

#: ../../source/urllib.request/index.rst:268
# 7b85b6cc7d814f83927d79bb3f7994ff
msgid "The ``MultiPartForm`` class can represent an arbitrary form as a multi-part MIME message with attached files."
msgstr ""

#: ../../source/urllib.request/index.rst:308
# 126bd7733e8a455dac5fab35017c1c6d
msgid "Creating Custom Protocol Handlers"
msgstr ""

#: ../../source/urllib.request/index.rst:310
# 27432e85819342db89dcc6137a1ce077
msgid "``urllib.request`` has built-in support for HTTP(S), FTP, and local file access. To add support for other URL types, register another protocol handler. For example, to support URLs pointing to arbitrary files on remote NFS servers, without requiring users to mount the path before accessing the file, create a class derived from ``BaseHandler`` and with a method ``nfs_open()``."
msgstr ""

#: ../../source/urllib.request/index.rst:317
# 3443b0436c2746c7999ebbe24c23b59d
msgid "The protocol-specific ``open()`` method is given a single argument, the ``Request`` instance, and it should return an object with a ``read()`` method that can be used to read the data, an ``info()`` method to return the response headers, and ``geturl()`` to return the actual URL of the file being read. A simple way to achieve that is to create an instance of ``urllib.response.addinfourl``, passing the headers, URL, and open file handle in to the constructor."
msgstr ""

#: ../../source/urllib.request/index.rst:0
# 1a2733656ef74f228d5bee566cf2b863
msgid "urllib_request_nfs_handler.py"
msgstr ""

#: ../../source/urllib.request/index.rst:329
# 94cf64f653b04281976faf5cfca98161
msgid "The ``FauxNFSHandler`` and ``NFSFile`` classes print messages to illustrate where a real implementation would add mount and unmount calls. Since this is just a simulation, ``FauxNFSHandler`` is primed with the name of a temporary directory where it should look for all of its files."
msgstr ""

#: ../../source/urllib.request/index.rst:364
# c9665b5a941d47f1b8b60bdb2301236b
msgid ":pydoc:`urllib.request`"
msgstr ""

#: ../../source/urllib.request/index.rst:366
# 8cdeb5dd9c68494dac5bad8fa5316676
msgid ":mod:`urllib.parse` -- Work with the URL string itself."
msgstr ""

#: ../../source/urllib.request/index.rst:368
# 1ab2f506b26f4de0b838649761f8075c
msgid "`Form content types <http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4>`_ -- W3C specification for posting files or large amounts of data via HTTP forms."
msgstr ""

#: ../../source/urllib.request/index.rst:373
# 8118b4932f254cc2a78649352c96b8f8
msgid ":mod:`mimetypes` -- Map filenames to mimetype."
msgstr ""

#: ../../source/urllib.request/index.rst:375
# d72f36c4c03b42f3bcce7e2ae8bfbf9a
msgid "`requests <https://pypi.python.org/pypi/requests>`_ -- Third-party HTTP library with better support for secure connections and an easier to use API. The Python core development team recommends most developers use ``requests``, in part because it receives more frequent security updates than the standard library."
msgstr ""

