# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/http.cookies/index.rst:3
# f845fe1ff55e4068a8132b4902d9e5ea
msgid "http.cookies --- HTTP Cookies"
msgstr ""

#: ../../source/http.cookies/index.rst:8
# 49b537c3a3e14500a98342324c1429a4
msgid "Defines classes for parsing and creating HTTP cookie headers."
msgstr ""

#: ../../source/http.cookies/index.rst:11
# e235f83f19c24b968bb31e5d4a4cb86d
msgid "The ``http.cookies`` module implements a parser for cookies that is mostly :rfc:`2109` compliant. The implementation is a little less strict than the standard because MSIE 3.0x does not support the entire standard."
msgstr ""

#: ../../source/http.cookies/index.rst:17
# f13a4b3a194944b1be2d97e42b939e33
msgid "Creating and Setting a Cookie"
msgstr ""

#: ../../source/http.cookies/index.rst:19
# c25f099bcd5a4d15acc53082303499cd
msgid "Cookies are used as state management for browser-based application, and as such are usually set by the server to be stored and returned by the client. The most trivial example of creating a cookie sets a single name-value pair."
msgstr ""

#: ../../source/http.cookies/index.rst:0
# 649215568e03402dbbb850e7996641c8
msgid "http_cookies_setheaders.py"
msgstr ""

#: ../../source/http.cookies/index.rst:28
# 34f0a21b2cc644fc9e6d8a39ae5a8c5f
msgid "The output is a valid ``Set-Cookie`` header ready to be passed to the client as part of the HTTP response."
msgstr ""

#: ../../source/http.cookies/index.rst:45
# 97a72c8428fd4c978cd24b16c1e94e8c
msgid "Morsels"
msgstr ""

#: ../../source/http.cookies/index.rst:47
# d201a4f73b324e5da3c408e8fe163e7c
msgid "It is also possible to control the other aspects of a cookie, such as the expiration, path, and domain. In fact, all of the RFC attributes for cookies can be managed through the ``Morsel`` object representing the cookie value."
msgstr ""

#: ../../source/http.cookies/index.rst:0
# f9c6636357c34817a4fd9d150ef4ad8e
msgid "http_cookies_Morsel.py"
msgstr ""

#: ../../source/http.cookies/index.rst:56
# b1d26a211db641f1a8c030d5e439bcb2
msgid "This example includes two different methods for setting stored cookies that expire. One sets the ``max-age`` to a number of seconds, the other sets ``expires`` to a date and time when the cookie should be discarded."
msgstr ""

#: ../../source/http.cookies/index.rst:103
# 15e5433332324ab3a7eb53ba971d8baa
msgid "Both the ``Cookie`` and ``Morsel`` objects act like dictionaries. A ``Morsel`` responds to a fixed set of keys:"
msgstr ""

#: ../../source/http.cookies/index.rst:106
# 8331e190dafe4371b5e3dbf3a16a8859
msgid "expires"
msgstr ""

#: ../../source/http.cookies/index.rst:107
# f176634c61c249f699962d67a8c04058
msgid "path"
msgstr ""

#: ../../source/http.cookies/index.rst:108
# db1c5ba0e7454c679c5e574258c1a4df
msgid "comment"
msgstr ""

#: ../../source/http.cookies/index.rst:109
# 9c93153e4d7d47058a719a155f704c01
msgid "domain"
msgstr ""

#: ../../source/http.cookies/index.rst:110
# 6a9b2dff35fc422691a654e048b71648
msgid "max-age"
msgstr ""

#: ../../source/http.cookies/index.rst:111
# 56f6b9b4a38546e7b02d9086d7b4ede5
msgid "secure"
msgstr ""

#: ../../source/http.cookies/index.rst:112
# 93f1b0d2a7314d648fae6583d5db3325
msgid "version"
msgstr ""

#: ../../source/http.cookies/index.rst:114
# d09af0b645eb4027a7ad78d8848dc8a8
msgid "The keys for a ``Cookie`` instance are the names of the individual cookies being stored. That information is also available from the key attribute of the ``Morsel``."
msgstr ""

#: ../../source/http.cookies/index.rst:119
# 57cd747f748a4f99ac71899627718766
msgid "Encoded Values"
msgstr ""

#: ../../source/http.cookies/index.rst:121
# ab97c65e6b864f3caadde1444763b31b
msgid "The cookie header needs values to be encoded so they can be parsed properly."
msgstr ""

#: ../../source/http.cookies/index.rst:0
# 2530bb940f674fc5a11585431067b438
msgid "http_cookies_coded_value.py"
msgstr ""

#: ../../source/http.cookies/index.rst:128
# 3886a8cd4fb34ed5892325c9a30830e2
msgid ":attr:`Morsel.value` is always the decoded value of the cookie, while :attr:`Morsel.coded_value` is always the representation to be used for transmitting the value to the client. Both values are always strings. Values saved to a cookie that are not strings are converted automatically."
msgstr ""

#: ../../source/http.cookies/index.rst:156
# 0c04dd986ede4260964be93ba7e84704
msgid "Receiving and Parsing Cookie Headers"
msgstr ""

#: ../../source/http.cookies/index.rst:158
# a35102a9a01f44c1a818f2dcc6ab81a4
msgid "Once the ``Set-Cookie`` headers are received by the client, it will return those cookies to the server on subsequent requests using a ``Cookie`` header. An incoming ``Cookie`` header string may contain several cookie values, separated by semicolons (``;``)."
msgstr ""

#: ../../source/http.cookies/index.rst:167
# 18cfec1fc4094e7d83c4844553e7987f
msgid "Depending on the web server and framework, cookies are either available directly from the headers or the ``HTTP_COOKIE`` environment variable."
msgstr ""

#: ../../source/http.cookies/index.rst:0
# 47537d5b3694405eaa68474d505d7207
msgid "http_cookies_parse.py"
msgstr ""

#: ../../source/http.cookies/index.rst:175
# d72e615b7ab54edfb16a4d50e57152f8
msgid "To decode them, pass the string without the header prefix to ``SimpleCookie`` when instantiating it, or use the ``load()`` method."
msgstr ""

#: ../../source/http.cookies/index.rst:198
# 5c81e3be99ac411ca54a6079e3484726
msgid "Alternative Output Formats"
msgstr ""

#: ../../source/http.cookies/index.rst:200
# fa5636828dc64b73909e928ce6c236a3
msgid "Besides using the ``Set-Cookie`` header, servers may deliver JavaScript that adds cookies to a client. ``SimpleCookie`` and ``Morsel`` provide JavaScript output via the ``js_output()`` method."
msgstr ""

#: ../../source/http.cookies/index.rst:0
# aba4b143226547e7806ad7ee3751ccfa
msgid "http_cookies_js_output.py"
msgstr ""

#: ../../source/http.cookies/index.rst:209
# f6ed32db16af4f2293931cc383831bf4
msgid "The result is a complete ``script`` tag with statements to set the cookies."
msgstr ""

#: ../../source/http.cookies/index.rst:237
# ba4dd90690aa4a2dba5349362dcd23d0
msgid ":pydoc:`http.cookies`"
msgstr ""

#: ../../source/http.cookies/index.rst:239
# 993435caa52b4ecebe1ef7c455aa9331
msgid ":mod:`http.cookiejar` -- The ``cookielib`` module, for working with cookies on the client-side."
msgstr ""

#: ../../source/http.cookies/index.rst:242
# d442e429e2dd4104ad8899ca90f60e56
msgid ":rfc:`2109` -- HTTP State Management Mechanism"
msgstr ""

