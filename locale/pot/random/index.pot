# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/random/index.rst:3
# 9fdc1fb049fd496d8a8801649f57ee3e
msgid "random --- Pseudorandom Number Generators"
msgstr ""

#: ../../source/random/index.rst:8
# e04728a630994908933f1cc7442c0db1
msgid "Implements several types of pseudorandom number generators."
msgstr ""

#: ../../source/random/index.rst:10
# 00ddb8f590354c32abf0d8a9e55ec065
msgid "The ``random`` module provides a fast pseudorandom number generator based on the *Mersenne Twister* algorithm.  Originally developed to produce inputs for Monte Carlo simulations, Mersenne Twister generates numbers with nearly uniform distribution and a large period, making it suited for a wide range of applications."
msgstr ""

#: ../../source/random/index.rst:17
# fdc232894729401388e5883414ae5a97
msgid "Generating Random Numbers"
msgstr ""

#: ../../source/random/index.rst:19
# 1680272e023e4ee091ddfa13bff0481c
msgid "The ``random()`` function returns the next random floating point value from the generated sequence.  All of the return values fall within the range ``0 <= n < 1.0``."
msgstr ""

#: ../../source/random/index.rst:0
# 61b432339bd5465ebf93983f70e35b26
msgid "random_random.py"
msgstr ""

#: ../../source/random/index.rst:27
# 3b5adbc39f79469da0870abe3ba1b6c9
msgid "Running the program repeatedly produces different sequences of numbers."
msgstr ""

#: ../../source/random/index.rst:47
# 71f9fc56234c4a0e9a7ac224a5d53523
msgid "To generate numbers in a specific numerical range, use ``uniform()`` instead."
msgstr ""

#: ../../source/random/index.rst:0
# 196b6d3b0b4d47678d12aa27bf318463
msgid "random_uniform.py"
msgstr ""

#: ../../source/random/index.rst:54
# 4267af2733234666a6ca5386f6b1eac3
msgid "Pass minimum and maximum values, and ``uniform()`` adjusts the return values from ``random()`` using the formula ``min + (max - min) * random()``."
msgstr ""

#: ../../source/random/index.rst:72
# eed5c236c366499ea7cb1b1aa32ee841
msgid "Seeding"
msgstr ""

#: ../../source/random/index.rst:74
# 3aac06aefd144cbeb3bc61c8b5c5bc35
msgid "``random()`` produces different values each time it is called and has a very large period before it repeats any numbers.  This is useful for producing unique values or variations, but there are times when having the same data set available to be processed in different ways is useful.  One technique is to use a program to generate random values and save them to be processed by a separate step.  That may not be practical for large amounts of data, though, so ``random`` includes the ``seed()`` function for initializing the pseudorandom generator so that it produces an expected set of values."
msgstr ""

#: ../../source/random/index.rst:0
# fb7695f9eb8b4661b3f79f64c12d5c80
msgid "random_seed.py"
msgstr ""

#: ../../source/random/index.rst:88
# 865aaec733e74bb1a410b0aea1a3277d
msgid "The seed value controls the first value produced by the formula used to produce pseudorandom numbers, and since the formula is deterministic it also sets the full sequence produced after the seed is changed.  The argument to ``seed()`` can be any hashable object. The default is to use a platform-specific source of randomness, if one is available.  Otherwise, the current time is used."
msgstr ""

#: ../../source/random/index.rst:114
# d37db88c89474f1b8e89f0e936e7b4f3
msgid "Saving State"
msgstr ""

#: ../../source/random/index.rst:116
# c4f6941f530e4cddaa8d3f86834c9ae9
msgid "The internal state of the pseudorandom algorithm used by ``random()`` can be saved and used to control the numbers produced in subsequent runs.  Restoring the previous state before continuing reduces the likelihood of repeating values or sequences of values from the earlier input.  The ``getstate()`` function returns data that can be used to re-initialize the random number generator later with ``setstate()``."
msgstr ""

#: ../../source/random/index.rst:0
# 39693d6840ef4954b722a82f564686cb
msgid "random_state.py"
msgstr ""

#: ../../source/random/index.rst:128
# 747918be8f534449bed15ad5a772bda5
msgid "The data returned by ``getstate()`` is an implementation detail, so this example saves the data to a file with :mod:`pickle` but otherwise treats it as a black box.  If the file exists when the program starts, it loads the old state and continues.  Each run produces a few numbers before and after saving the state, to show that restoring the state causes the generator to produce the same values again."
msgstr ""

#: ../../source/random/index.rst:163
# 94ee0c3bfe1541bfa885d06267ba016e
msgid "Random Integers"
msgstr ""

#: ../../source/random/index.rst:165
# c6536ca663ac4e24bc0989ad8b2573f3
msgid "``random()`` generates floating point numbers.  It is possible to convert the results to integers, but using ``randint()`` to generate integers directly is more convenient."
msgstr ""

#: ../../source/random/index.rst:0
# afdd4a4a97bf4c1a83ba0cc7dc76bb16
msgid "random_randint.py"
msgstr ""

#: ../../source/random/index.rst:173
# a6b6aee56c1f4e74b47b0ee958cd29d6
msgid "The arguments to ``randint()`` are the ends of the inclusive range for the values.  The numbers can be positive or negative, but the first value should be less than the second."
msgstr ""

#: ../../source/random/index.rst:190
# 99d7f04d6bed4d078edfd1cd3c753441
msgid "``randrange()`` is a more general form of selecting values from a range."
msgstr ""

#: ../../source/random/index.rst:0
# 5d74264d93b04ecd96cba15a52c00269
msgid "random_randrange.py"
msgstr ""

#: ../../source/random/index.rst:197
# 164196f700774a7d8a6aa22f8d8d1660
msgid "``randrange()`` supports a ``step`` argument, in addition to start and stop values, so it is fully equivalent to selecting a random value from ``range(start, stop, step)``.  It is more efficient, because the range is not actually constructed."
msgstr ""

#: ../../source/random/index.rst:216
# 626ec6643d38433eb55ce4d771224fff
msgid "Picking Random Items"
msgstr ""

#: ../../source/random/index.rst:218
# bf5c85a716a2438d96f05e360f07558e
msgid "One common use for random number generators is to select a random item from a sequence of enumerated values, even if those values are not numbers.  ``random`` includes the ``choice()`` function for making a random selection from a sequence.  This example simulates flipping a coin 10,000 times to count how many times it comes up heads and how many times tails."
msgstr ""

#: ../../source/random/index.rst:0
# 96724217a26442c78f01d87f3471866c
msgid "random_choice.py"
msgstr ""

#: ../../source/random/index.rst:229
# 964a1e5b51e54c38987ec3edeeca1dea
msgid "There are only two outcomes allowed, so rather than use numbers and convert them the words \"heads\" and \"tails\" are used with ``choice()``.  The results are tabulated in a dictionary using the outcome names as keys."
msgstr ""

#: ../../source/random/index.rst:249
# 9e0c2419bc8d4001b3ca76c23b055a9a
msgid "Permutations"
msgstr ""

#: ../../source/random/index.rst:251
# 1e098f3c96db42fb86e33b28e9485d30
msgid "A simulation of a card game needs to mix up the deck of cards and then deal them to the players, without using the same card more than once.  Using ``choice()`` could result in the same card being dealt twice, so instead, the deck can be mixed up with ``shuffle()`` and then individual cards removed as they are dealt."
msgstr ""

#: ../../source/random/index.rst:0
# c749e6f5ace04e9bb4811bea337198fa
msgid "random_shuffle.py"
msgstr ""

#: ../../source/random/index.rst:261
# 79c98ece70c24456afc76237b710e36c
msgid "The cards are represented as strings with the face value and a letter indicating the suit.  The dealt \"hands\" are created by adding one card at a time to each of four lists, and removing it from the deck so it cannot be dealt again."
msgstr ""

#: ../../source/random/index.rst:300
# c13bbf1cc0434319a708a79ab057541b
msgid "Sampling"
msgstr ""

#: ../../source/random/index.rst:302
# bf0c3c2a32cf45f59a1a1c41d65ab0c6
msgid "Many simulations need random samples from a population of input values.  The ``sample()`` function generates samples without repeating values and without modifying the input sequence.  This example prints a random sample of words from the system dictionary."
msgstr ""

#: ../../source/random/index.rst:0
# 44033a9c57a448eea139aee4df5fe07d
msgid "random_sample.py"
msgstr ""

#: ../../source/random/index.rst:311
# 6007702a3a3e4216a5e23585fe41810f
msgid "The algorithm for producing the result set takes into account the sizes of the input and the sample requested to produce the result as efficiently as possible."
msgstr ""

#: ../../source/random/index.rst:342
# 3591d372b83b46edade9b4c7fe156e82
msgid "Multiple Simultaneous Generators"
msgstr ""

#: ../../source/random/index.rst:344
# 447fd7d4cb334d05b02f3b68f61ec358
msgid "In addition to module-level functions, ``random`` includes a ``Random`` class to manage the internal state for several random number generators.  All of the functions described earlier are available as methods of the ``Random`` instances, and each instance can be initialized and used separately, without interfering with the values returned by other instances."
msgstr ""

#: ../../source/random/index.rst:0
# a551d35922ba4096870e7c671e2c69a0
msgid "random_random_class.py"
msgstr ""

#: ../../source/random/index.rst:355
# 7bb01929440149c5b2bb462a518cab2a
msgid "On a system with good native random value seeding, the instances start out in unique states.  However, if there is no good platform random value generator, the instances are likely to have been seeded with the current time, and therefore produce the same values."
msgstr ""

#: ../../source/random/index.rst:383
# baf3aeb608bb4c92b0d634407c9eee63
msgid "SystemRandom"
msgstr ""

#: ../../source/random/index.rst:385
# 33a9b76405aa431fbca09984f2d4fc46
msgid "Some operating systems provide a random number generator that has access to more sources of entropy that can be introduced into the generator.  ``random`` exposes this feature through the ``SystemRandom`` class, which has the same API as ``Random`` but uses ``os.urandom()`` to generate the values that form the basis of all of the other algorithms."
msgstr ""

#: ../../source/random/index.rst:0
# 75b1b9a6c591404ebb07d5951e9fa618
msgid "random_system_random.py"
msgstr ""

#: ../../source/random/index.rst:396
# 6261dc737846401bbda303d9056e4a32
msgid "Sequences produced by ``SystemRandom`` are not reproducible because the randomness is coming from the system, rather than software state (in fact, ``seed()`` and ``setstate()`` have no effect at all)."
msgstr ""

#: ../../source/random/index.rst:425
# ea3450e6d0ec4eabaf49a3f26dcd884d
msgid "Non-uniform Distributions"
msgstr ""

#: ../../source/random/index.rst:427
# 88eb39d035cf471583ad7c3b9e8216c5
msgid "While the uniform distribution of the values produced by ``random()`` is useful for a lot of purposes, other distributions more accurately model specific situations.  The ``random`` module includes functions to produce values in those distributions, too. They are listed here, but not covered in detail because their uses tend to be specialized and require more complex examples."
msgstr ""

#: ../../source/random/index.rst:435
# e39e142f04c34a2daf0f05f4f175e18d
msgid "Normal"
msgstr ""

#: ../../source/random/index.rst:437
# eda4895c9cd84091b5dcf5a85041a8c9
msgid "The *normal* distribution is commonly used for non-uniform continuous values such as grades, heights, weights, etc.  The curve produced by the distribution has a distinctive shape which has lead to it being nicknamed a \"bell curve.\"  ``random`` includes two functions for generating values with a normal distribution, ``normalvariate()`` and the slightly faster ``gauss()`` (the normal distribution is also called the Gaussian distribution)."
msgstr ""

#: ../../source/random/index.rst:445
# 3a95ca58fada42149907fdc6ffa89bc2
msgid "The related function, ``lognormvariate()`` produces pseudorandom values where the logarithm of the values is distributed normally. Log-normal distributions are useful for values that are the product of several random variables which do not interact."
msgstr ""

#: ../../source/random/index.rst:451
# 4d2c7d7cba2f4e4f8a34a5a882fc4089
msgid "Approximation"
msgstr ""

#: ../../source/random/index.rst:453
# 26a10cf953a7457e930fa2280ce22518
msgid "The *triangular* distribution is used as an approximate distribution for small sample sizes.  The \"curve\" of a triangular distribution has low points at known minimum and maximum values, and a high point at the mode, which is estimated based on a \"most likely\" outcome (reflected by the mode argument to ``triangular()``)."
msgstr ""

#: ../../source/random/index.rst:460
# 22072f4e6aea4fa3a02648c76c44d7da
msgid "Exponential"
msgstr ""

#: ../../source/random/index.rst:462
# 3f081a4c1dfd461eb5d390621855ef12
msgid "``expovariate()`` produces an exponential distribution useful for simulating arrival or interval time values for in homogeneous Poisson processes such as the rate of radioactive decay or requests coming into a web server."
msgstr ""

#: ../../source/random/index.rst:467
# b77a6e8ed1884849880fd791c9968bc2
msgid "The Pareto, or power law, distribution matches many observable phenomena and was popularized by *The Long Tail*, by Chris Anderson. The ``paretovariate()`` function is useful for simulating allocation of resources to individuals (wealth to people, demand for musicians, attention to blogs, etc.)."
msgstr ""

#: ../../source/random/index.rst:474
# d693a521146f44fd875280c79eebff4b
msgid "Angular"
msgstr ""

#: ../../source/random/index.rst:476
# 40ee5ed9c5eb48e4a9b82d4991b589d8
msgid "The von Mises, or circular normal, distribution (produced by ``vonmisesvariate()``) is used for computing probabilities of cyclic values such as angles, calendar days, and times."
msgstr ""

#: ../../source/random/index.rst:481
# 1d00f3798d2d4fc19ad37d28b2fc30a1
msgid "Sizes"
msgstr ""

#: ../../source/random/index.rst:483
# aa2de2023975423aa6b002c3bede3976
msgid "``betavariate()`` generates values with the Beta distribution, which is commonly used in Bayesian statistics and applications such as task duration modeling."
msgstr ""

#: ../../source/random/index.rst:487
# f403d754d52d4d09ae8947a8d8cd2bb2
msgid "The Gamma distribution produced by ``gammavariate()`` is used for modeling the sizes of things such as waiting times, rainfall, and computational errors."
msgstr ""

#: ../../source/random/index.rst:491
# 72714e70f2ea471aaaee07849844e5f3
msgid "The Weibull distribution computed by ``weibullvariate()`` is used in failure analysis, industrial engineering, and weather forecasting.  It describes the distribution of sizes of particles or other discrete objects."
msgstr ""

#: ../../source/random/index.rst:499
# ac0b0e1729954b53958b6a4176bb0965
msgid ":pydoc:`random`"
msgstr ""

#: ../../source/random/index.rst:501
# f11f611187704319a9ecff74b4b12551
msgid "\"Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator\" -- Article by M. Matsumoto and T. Nishimura from *ACM Transactions on Modeling and Computer Simulation* Vol. 8, No. 1, January pp.3-30 1998."
msgstr ""

#: ../../source/random/index.rst:506
# f9e56fd1b083455ca8abac3ef4db2e30
msgid "`Wikipedia: Mersenne Twister <https://en.wikipedia.org/wiki/Mersenne_twister>`_ -- Article about the pseudorandom generator algorithm used by Python."
msgstr ""

#: ../../source/random/index.rst:510
# 0d1bf476d8cc4f5cb1e7782cc3bc8829
msgid "`Wikipedia: Uniform distribution <https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)>`_ -- Article about continuous uniform distributions in statistics."
msgstr ""

