# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/signal/index.rst:3
# ffb48f2e94004c078c1cb89f3c4ce1be
msgid "signal --- Asynchronous System Events"
msgstr ""

#: ../../source/signal/index.rst:8
# cf61a0701c4a4c8dac304dcfabeb2dac
msgid "Asynchronous system events"
msgstr ""

#: ../../source/signal/index.rst:10
# 5dee9f8c93144e3d824d6e8485f798b0
msgid "Signals are an operating system feature that provide a means of notifying a program of an event, and having it handled asynchronously. They can be generated by the system itself, or sent from one process to another.  Since signals interrupt the regular flow of the program, it is possible that some operations (especially I/O) may produce errors if a signal is received in the middle."
msgstr ""

#: ../../source/signal/index.rst:17
# 3469704f4d5b41cf884cd614b10ef961
msgid "Signals are identified by integers and are defined in the operating system C headers.  Python exposes the signals appropriate for the platform as symbols in the ``signal`` module.  The examples in this section use ``SIGINT`` and ``SIGUSR1``.  Both are typically defined for all Unix and Unix-like systems."
msgstr ""

#: ../../source/signal/index.rst:25
# f5108d34395e4bb88f3a1d2e6ac2d08e
msgid "Programming with Unix signal handlers is a non-trivial endeavor. This is an introduction, and does not include all of the details needed to use signals successfully on every platform. There is some degree of standardization across versions of Unix, but there is also some variation, so consult the operating system documentation if you run into trouble."
msgstr ""

#: ../../source/signal/index.rst:33
# fbac040e43ab4f14a2d341c385eefa6a
msgid "Receiving Signals"
msgstr ""

#: ../../source/signal/index.rst:35
# 2fbb93241df94f56820101c7ba1a2971
msgid "As with other forms of event-based programming, signals are received by establishing a callback function, called a *signal handler*, that is invoked when the signal occurs.  The arguments to the signal handler are the signal number and the stack frame from the point in the program that was interrupted by the signal."
msgstr ""

#: ../../source/signal/index.rst:0
# 7946354d8d9f4dafbb23a96bba87a5e2
msgid "signal_signal.py"
msgstr ""

#: ../../source/signal/index.rst:45
# db29350324d84e778917cfb7824f5d2e
msgid "This example script loops indefinitely, pausing for a few seconds each time.  When a signal comes in, the ``sleep()`` call is interrupted and the signal handler ``receive_signal`` prints the signal number. After the signal handler returns, the loop continues."
msgstr ""

#: ../../source/signal/index.rst:50
# 23eb73df48044002a747921bebea50a9
msgid "Send signals to the running program using ``os.kill()`` or the Unix command line program ``kill``."
msgstr ""

#: ../../source/signal/index.rst:74
# 9ec7e9f8c6464b9eb38ca22ed9296a32
msgid "The previous output was produced by running ``signal_signal.py`` in one window, then in another window running:"
msgstr ""

#: ../../source/signal/index.rst:87
# abafb548e3b1498a80401c1bf65c6e08
msgid "Retrieving Registered Handlers"
msgstr ""

#: ../../source/signal/index.rst:89
# 3b9db2436a2a4a0ab6dca13c720b9389
msgid "To see what signal handlers are registered for a signal, use ``getsignal()``.  Pass the signal number as argument.  The return value is the registered handler, or one of the special values ``SIG_IGN`` (if the signal is being ignored), ``SIG_DFL`` (if the default behavior is being used), or ``None`` (if the existing signal handler was registered from C, rather than Python)."
msgstr ""

#: ../../source/signal/index.rst:0
# 5f3953f39e764348b089ab0abe02280c
msgid "signal_getsignal.py"
msgstr ""

#: ../../source/signal/index.rst:100
# a20380c1f4f64a629c06194c635b21cf
msgid "Again, since each OS may have different signals defined, the output on other systems may vary.  This is from OS X:"
msgstr ""

#: ../../source/signal/index.rst:147
# a561a0c312964c12852797c96875dbc5
msgid "Sending Signals"
msgstr ""

#: ../../source/signal/index.rst:149
# 41124ef064b744d0bfdabc032c8d3279
msgid "The function for sending signals from within Python is ``os.kill()``.  Its use is covered in the section on the :mod:`os` module, :ref:`creating-processes-with-os-fork`."
msgstr ""

#: ../../source/signal/index.rst:154
# ce30513a62a049eaa92f37c5a5806739
msgid "Alarms"
msgstr ""

#: ../../source/signal/index.rst:156
# 0a83ee5cd1564d8bb717e608cfd97f17
msgid "Alarms are a special sort of signal, where the program asks the OS to notify it after some period of time has elapsed.  As the standard module documentation for :mod:`os` points out, this is useful for avoiding blocking indefinitely on an I/O operation or other system call."
msgstr ""

#: ../../source/signal/index.rst:0
# 20f623badea04a6d9f079be23dbbee2d
msgid "signal_alarm.py"
msgstr ""

#: ../../source/signal/index.rst:165
# cd2690fd97cc4eb8b72e9356caf4e5fa
msgid "In this example, the call to ``sleep()`` is interrupted, but then continues after the signal is processed so the message printed after ``sleep()`` returns shows that the program was paused for at least as long as the sleep duration."
msgstr ""

#: ../../source/signal/index.rst:186
# e9413606c95c4f14803b770dd2b10310
msgid "Ignoring Signals"
msgstr ""

#: ../../source/signal/index.rst:188
# 3eb7dfb2ba0742c1aa8809b5e786420c
msgid "To ignore a signal, register ``SIG_IGN`` as the handler.  This script replaces the default handler for ``SIGINT`` with ``SIG_IGN``, and registers a handler for ``SIGUSR1``.  Then it uses ``signal.pause()`` to wait for a signal to be received."
msgstr ""

#: ../../source/signal/index.rst:0
# 26f1fc8704954c7292953e0600ffa643
msgid "signal_ignore.py"
msgstr ""

#: ../../source/signal/index.rst:197
# 3c442750a6bc42c0bbd77a96a96e56bc
msgid "Normally ``SIGINT`` (the signal sent by the shell to a program when the user presses ``Ctrl-C``) raises a ``KeyboardInterrupt``. This example ignores ``SIGINT`` and raises ``SystemExit`` when it sees ``SIGUSR1``.  Each ``^C`` in the output represents an attempt to use ``Ctrl-C`` to kill the script from the terminal. Using ``kill -USR1 72598`` from another terminal eventually causes the script to exit."
msgstr ""

#: ../../source/signal/index.rst:216
# 7fe0e4f117544141b70ed83340c663a5
msgid "Signals and Threads"
msgstr ""

#: ../../source/signal/index.rst:218
# 31b96b66fafc4ec89913c4e61a31d52f
msgid "Signals and threads do not generally mix well because only the main thread of a process will receive signals.  The following example sets up a signal handler, waits for the signal in one thread, and sends the signal from another."
msgstr ""

#: ../../source/signal/index.rst:0
# e5a5f850940f4385929866cef4ea619c
msgid "signal_threads.py"
msgstr ""

#: ../../source/signal/index.rst:227
# 080fe5c9bf3e47f69c65e57c6c11e1be
msgid "The signal handlers were all registered in the main thread because this is a requirement of the ``signal`` module implementation for Python, regardless of underlying platform support for mixing threads and signals.  Although the receiver thread calls ``signal.pause()``, it does not receive the signal.  The ``signal.alarm(2)`` call near the end of the example prevents an infinite block, since the receiver thread will never exit."
msgstr ""

#: ../../source/signal/index.rst:247
# 60ec70155b6e48c5ac7d0d19a2d001d8
msgid "Although alarms can be set in any thread, they are always received by the main thread."
msgstr ""

#: ../../source/signal/index.rst:0
# f6c66c4039b34f34a2bdf990d6815670
msgid "signal_threads_alarm.py"
msgstr ""

#: ../../source/signal/index.rst:254
# b1695677900840ebad03444efe876701
msgid "The alarm does not abort the ``sleep()`` call in ``use_alarm()``."
msgstr ""

#: ../../source/signal/index.rst:276
# f7d5d35258ff49c3a967f8be453a51a2
msgid ":pydoc:`signal`"
msgstr ""

#: ../../source/signal/index.rst:278
# 818dd664401b419d889904b3bd0fd56f
msgid ":pep:`475` -- Retry system calls failing with EINTR"
msgstr ""

#: ../../source/signal/index.rst:280
# aa8641daf8204552bd28262aababf883
msgid ":mod:`subprocess` -- More examples of sending signals to processes."
msgstr ""

#: ../../source/signal/index.rst:283
# 68c25efd0fe1469d8ccdfad2d23ce7ce
msgid ":ref:`creating-processes-with-os-fork` -- The ``kill()`` function can be used to send signals between processes."
msgstr ""

