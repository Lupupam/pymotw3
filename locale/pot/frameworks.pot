# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/frameworks.rst:3
# 214c3eedd4014a98b1624d86853d34f2
msgid "Application Building Blocks"
msgstr ""

#: ../../source/frameworks.rst:5
# c0de7940e9354bb9a2b6208f220ed449
msgid "The strength of Python's standard library is its size.  It includes implementations of so many aspects of a program's structure that developers can concentrate on what makes their application unique, instead of having to write all of the basic pieces over and over again.  This chapter covers some of the more frequently reused building blocks that solve problems common to so many applications."
msgstr ""

#: ../../source/frameworks.rst:12
# 8d1a111304cd4f3989478b6c6f1ad353
msgid ":mod:`argparse` is an interface for parsing and validating command line arguments.  It supports converting arguments from strings to integers and other types, running callbacks when an option is encountered, setting default values for options not provided by the user, and automatically producing usage instructions for a program. :mod:`getopt` implements the low level argument processing model available to C programs and shell scripts.  It has fewer features than other option parsing libraries, but that simplicity and familiarity make it a popular choice."
msgstr ""

#: ../../source/frameworks.rst:22
# 6c85696bf31d4fd18b3f0808841d56cd
msgid "Interactive programs should use :mod:`readline` to give the user a command prompt.  It includes tools for managing history, auto-completing parts of commands, and interactive editing with ``emacs`` and ``vi`` key-bindings.  To securely prompt the user for a password or other secret value, without echoing the value to the screen as it is typed, use :mod:`getpass`."
msgstr ""

#: ../../source/frameworks.rst:29
# 65e0e6d3d8c24901a7c332da0a019db7
msgid "The :mod:`cmd` module includes a framework for interactive, command-driven shell style programs.  It provides the main loop and handles the interaction with the user so the application only needs to implement the processing callbacks for the individual commands."
msgstr ""

#: ../../source/frameworks.rst:34
# f861f9b9f94e434e9c335a8dd2f03b60
msgid ":mod:`shlex` is a parser for shell-style syntax, with lines made up of tokens separated by white-space.  It is smart about quotes and escape sequences, so text with embedded spaces is treated as a single token. ``shlex`` works well as the tokenizer for domain-specific languages such as configuration files or programming languages."
msgstr ""

#: ../../source/frameworks.rst:40
# c071d752059d4ca98b1a756fd87fce00
msgid "It is easy to manage application configuration files with :mod:`configparser`.  It can save user preferences between program runs and read them the next time an application starts, or even serve as a simple data file format."
msgstr ""

#: ../../source/frameworks.rst:45
# b1d708ddb7024983a810a91a846e9743
msgid "Applications being deployed in the real world need to give their users debugging information.  Simple error messages and tracebacks are helpful, but when it is difficult to reproduce an issue a full activity log can point directly to the chain of events that leads to a failure.  The :mod:`logging` module includes a full-featured API that manages log files, supports multiple threads, and even interfaces with remote logging daemons for centralized logging."
msgstr ""

#: ../../source/frameworks.rst:53
# 433c55b3cad14c3b99ad212a1d093b92
msgid "One of the most common patterns for programs in Unix environments is a line-by-line filter that reads data, modifies it, and writes it back out.  Reading from files is simple enough, but there may not be an easier way to create a filter application than by using the :mod:`fileinput` module.  Its API is a line iterator that yields each input line, so the main body of the program is a simple ``for`` loop. The module handles parsing command line arguments for filenames to be processed, or falling back to reading directly from standard input, so tools built on ``fileinput`` can be run directly on a file or as part of a pipeline."
msgstr ""

#: ../../source/frameworks.rst:64
# b6af977646bd499981f731c3722c39e9
msgid "Use :mod:`atexit` to schedule functions to be run as the interpreter is shutting down a program.  Registering exit callbacks is useful for releasing resources by logging out of remote services, closing files, etc."
msgstr ""

#: ../../source/frameworks.rst:69
# 7d6ec08cd0da4d64bb8a876b0a1ae45c
msgid "The :mod:`sched` module implements a scheduler for triggering events at set times in the future.  The API does not dictate the definition of \"time,\" so anything from true clock time to interpreter steps can be used."
msgstr ""

