# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/asyncio/subprocesses.rst:3
# 5604df852d304017a15b4768c8dab630
msgid "Working with Subprocesses"
msgstr ""

#: ../../source/asyncio/subprocesses.rst:5
# 24483e704ad3489091437b18154fc916
msgid "It is frequently necessary to work with other programs and processes, to take advantage of existing code without rewriting it or to access libraries or features not available from within Python. As with network I/O, ``asyncio`` includes two abstractions for starting another program and then interacting with it."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:12
# 6a0c7a16116c4a00afc0728458d5eeeb
msgid "Using the Protocol Abstraction with Subprocesses"
msgstr ""

#: ../../source/asyncio/subprocesses.rst:14
# 31b75ad7d9994b67b7bb1eb4eafc83e3
msgid "This example uses a coroutine to launch a process to run the Unix command ``df`` to find the free space on local disks. It uses ``subprocess_exec()`` to launch the process and tie it to a protocol class that knows how to read the ``df`` command output and parse it. The methods of the protocol class are called automatically based on I/O events for the subprocess. Because both the ``stdin`` and ``stderr`` arguments are set to ``None``, those communication channels are not connected to the new process."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:0
# 2e93237fd8314cf38cb21624a4235482
msgid "asyncio_subprocess_protocol.py"
msgstr ""

#: ../../source/asyncio/subprocesses.rst:27
# cd8f147b28774d69a6f9930ef15f4c9f
msgid "The class ``DFProtocol`` is derived from ``SubprocessProtocol``, which defines the API for a class to communicate with another process through pipes. The ``done`` argument is expected to be a ``Future`` that the caller will use to watch for the process to finish."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:36
# b8ad7d1bdc22496990994dd6ebd22e68
msgid "As with socket communication, ``connection_made()`` is invoked when the input channels to the new process are set up. The ``transport`` argument is an instance of a subclass of ``BaseSubprocessTransport``. It can read data output by the process and write data to the input stream for the process, if the process was configured to receive input."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:46
# 5d9bd1df1ff44d49b6fc730d43d315ce
msgid "When the process has generated output, ``pipe_data_received()`` is invoked with the file descriptor where the data was emitted and the actual data read from the pipe. The protocol class saves the output from the standard output channel of the process in a buffer for later processing."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:55
# ae277a5b0be341efa4a1f98e9a2166a8
msgid "When the process terminates, ``process_exited()`` is called. The exit code of the process is available from the transport object by calling ``get_returncode()``. In this case, if there is no error reported the available output is decoded and parsed before being returned through the ``Future`` instance. If there is an error, the results are assumed to be empty. Setting the result of the future tells ``run_df()`` that the process has exited, so it cleans up and then returns the results."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:67
# 3a31e5caccd14945824ee64546dffa79
msgid "The command output is parsed into a sequence of dictionaries mapping the header names to their values for each line of output, and the resulting list is returned."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:74
# 5e8253d9b6f14e2b85ea01ef913cad20
msgid "The ``run_df()`` coroutine is run using ``run_until_complete()``, then the results are examined and the free space on each device is printed."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:81
# 1699f371ff4e4854865bbe604bb6239c
msgid "The output below shows the sequence of steps taken, and the free space on three drives on the system where it was run."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:109
# 1ff374d4f754434fb4139ef6c21eb88d
msgid "Calling Subprocesses with Coroutines and Streams"
msgstr ""

#: ../../source/asyncio/subprocesses.rst:111
# b643787ed89e49e7bd4654024be0e40f
msgid "To use coroutines to run a process directly, instead of accessing it through a ``Protocol`` subclass, call ``create_subprocess_exec()`` and specify which of ``stdout``, ``stderr``, and ``stdin`` to connect to a pipe. The result of the coroutine to spawn the subprocess is a ``Process`` instance that can be used to manipulate the subprocess or communicate with it."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:0
# 7b4db744741a4d80a4319319ccea4b43
msgid "asyncio_subprocess_coroutine.py"
msgstr ""

#: ../../source/asyncio/subprocesses.rst:122
# cb8608dd15c44427afa41afdfd98b611
msgid "In this example, ``df`` does not need any input other than its command line arguments, so the next step is to read all of the output. With the ``Protocol`` there is no control over how much data is read at a time. This example uses ``readline()`` but it could also call ``read()`` directly to read data that is not line-oriented. The output of the command is buffered, as with the protocol example, so it can be parsed later."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:133
# d1a100407501423abed19af80dd7d37d
msgid "The ``readline()`` method returns an empty byte string when there is no more output because the program has finished. To ensure the process is cleaned up properly, the next step is to wait for the process to exit fully."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:141
# 82dc6f1a89c64f04b47d895752848aba
msgid "At that point the exit status can be examined to determine whether to parse the output or treat the error as it produced no output. The parsing logic is the same as in the previous example, but is in a stand-alone function (not shown here) because there is no protocol class to hide it in. After the data is parsed, the results and exit code are then returned to the caller."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:151
# d3b5bb36d38947b9811ff1cfe185de07
msgid "The main program looks similar to the protocol-based example, because the implementation changes are isolated in ``run_df()``."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:157
# 4ef11573490a4c458ea09dbe97b1e4ae
msgid "Since the output from ``df`` can be read one line at a time, it is echoed to show the progress of the program. Otherwise, the output looks similar to the previous example."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:194
# 73bc93ed3f8e46918eda67f3866ec44a
msgid "Sending Data to a Subprocess"
msgstr ""

#: ../../source/asyncio/subprocesses.rst:196
# f275639d4df84018a61b497b41828a0d
msgid "Both of the previous examples used only a single communication channel to read data from a second process. It is often necessary to send data into a command for processing. This example defines a coroutine to execute the Unix command ``tr`` for translating characters in its input stream. In this case, ``tr`` is used to convert lower-case letters to upper-case letters."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:203
# 3a5430e548fa403a830e4ca1685ec04e
msgid "The ``to_upper()`` coroutine takes as argument an event loop and an input string. It spawns a second process running ``\"tr [:lower:] [:upper:]\"``."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:0
# 32e182b3bfb64423bf6f189ac1052fe8
msgid "asyncio_subprocess_coroutine_write.py"
msgstr ""

#: ../../source/asyncio/subprocesses.rst:211
# 7c24ef4a5d9143028b8887b18b0aa745
msgid "Next ``to_upper()`` uses the ``communicate()`` method of the ``Process`` to send the input string to the command and read all of the resulting output, asynchronously. As with the ``subprocess.Popen`` version of the same method, ``communicate()`` returns the complete output byte strings. If a command is likely to produce more data than can fit comfortably into memory, the input cannot be produced all at once, or the output must be processed incrementally, it is possible to use the stdin, stdout, and stderr handles of the ``Process`` directly instead of calling ``communicate()``."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:225
# aa689abdb3bf4574951ea30b852cfffe
msgid "After the I/O is done, waiting for the process to completely exit ensures it is cleaned up properly."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:231
# 33782aeefd8d45f991164e7b37e7d690
msgid "The return code can then be examined, and the output byte string decoded, to prepare the return value from the coroutine."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:237
# e7e3bf6fb30e4811b3b458a8b5af9c4f
msgid "The main part of the program establishes a message string to be transformed, and then sets up the event loop to run ``to_upper()`` and prints the results."
msgstr ""

#: ../../source/asyncio/subprocesses.rst:244
# ca6e8cb72d4141968053ecfd10496ee6
msgid "The output shows the sequence of operations and then how the simple text message is transformed."
msgstr ""

