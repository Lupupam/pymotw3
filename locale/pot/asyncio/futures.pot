# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/asyncio/futures.rst:3
# 8f81e0b04ce245258bb31a95fe76600a
msgid "Producing Results Asynchronously"
msgstr ""

#: ../../source/asyncio/futures.rst:5
# 1044334db0ce4bc8a0962ee4742fa7d7
msgid "A ``Future`` represents the result of work that has not been completed yet. The event loop can watch for a ``Future`` object's state to indicate that it is done, allowing one part of an application to wait for another part to finish some work."
msgstr ""

#: ../../source/asyncio/futures.rst:11
# 6f3a9d9163a044e9ab458358c7ecf86e
msgid "Waiting for a Future"
msgstr ""

#: ../../source/asyncio/futures.rst:13
# 8f635552b20c44bdbca90265b3f41aaa
msgid "A ``Future`` acts like a coroutine, so any techniques useful for waiting for a coroutine can also be used to wait for the future to be marked done. This example passes the future to the event loop's ``run_until_complete()`` method."
msgstr ""

#: ../../source/asyncio/futures.rst:0
# 73b0f12d08fb4f90a56979a945236f66
msgid "asyncio_future_event_loop.py"
msgstr ""

#: ../../source/asyncio/futures.rst:22
# 8a73455f436b41b3af48e93114387372
msgid "The state of the ``Future`` changes to done when ``set_result()`` is called, and the ``Future`` instance retains the result given to the method for retrieval later."
msgstr ""

#: ../../source/asyncio/futures.rst:43
# 89cb75f6b9314254b89e2f9668844e36
msgid "A ``Future`` can also be used with the ``await`` keyword, as in this example."
msgstr ""

#: ../../source/asyncio/futures.rst:0
# 30ec469ff8894fc880ee309945c58c66
msgid "asyncio_future_await.py"
msgstr ""

#: ../../source/asyncio/futures.rst:50
# ed15bd6ce31b42de993465cca7ac509e
msgid "The result of the ``Future`` is returned by ``await``, so it is frequently possible to have the same code work with a regular coroutine and a ``Future`` instance."
msgstr ""

#: ../../source/asyncio/futures.rst:69
# 0506af0df5bd429a96f9fa791f91bc5d
msgid "Future Callbacks"
msgstr ""

#: ../../source/asyncio/futures.rst:71
# b18d27dac60a4917abb22355dc20d6b5
msgid "In addition to working like a coroutine, a ``Future`` can invoke callbacks when it is completed. Callbacks are invoked in the order they are registered."
msgstr ""

#: ../../source/asyncio/futures.rst:0
# e55826b41feb47dc8e37e6b7f7761fed
msgid "asyncio_future_callback.py"
msgstr ""

#: ../../source/asyncio/futures.rst:79
# 3ec20d6c1edf4542b1c9235f2afa97c1
msgid "The callback should expect one argument, the ``Future`` instance. To pass additional arguments to the callbacks, use ``functools.partial()`` to create a wrapper."
msgstr ""

