# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/asyncio/unix_signals.rst:3
# b0f260457a7648299c326ae380a6378a
msgid "Receiving Unix Signals"
msgstr ""

#: ../../source/asyncio/unix_signals.rst:5
# 56da643eadd24edabb9ee72e750b512b
msgid "Unix system event notifications normally interrupt an application, triggering their handler. When used with ``asyncio``, signal handler callbacks are interleaved with the other coroutines and callbacks managed by the event loop. This results in fewer interrupted functions, and the resulting need to provide safe-guards for cleaning up incomplete operations."
msgstr ""

#: ../../source/asyncio/unix_signals.rst:12
# f11aa6cbd9b54298aec5a56e14ebee55
msgid "Signal handlers must be regular callables, not coroutines."
msgstr ""

#: ../../source/asyncio/unix_signals.rst:0
# e53fbd255fc5401f9e830b8aa5cbdd53
msgid "asyncio_signal.py"
msgstr ""

#: ../../source/asyncio/unix_signals.rst:18
# 48947bda8e614207a14f56a1b72142da
msgid "The signal handlers are registered using ``add_signal_handler()``. The first argument is the signal and the second is the callback.  Callbacks are passed no arguments, so if arguments are needed a function can be wrapped with ``functools.partial()``."
msgstr ""

#: ../../source/asyncio/unix_signals.rst:27
# f3d63cbb3f364dd0bbfb78eae24873ce
msgid "This example program uses a coroutine to send signals to itself via ``os.kill()``. After each signal is sent, the coroutine yields control to allow the handler to be run. In a normal application, there would be more places where application code yields back to the event loop and no artificial yield like this would be needed."
msgstr ""

#: ../../source/asyncio/unix_signals.rst:36
# 0cddf2cc72d245b682059b3783188a6c
msgid "The main program runs ``send_signals()`` until it has sent all of the signals."
msgstr ""

#: ../../source/asyncio/unix_signals.rst:42
# 03793750f001467589245760c217251e
msgid "The output shows how the handlers are called when ``send_signals()`` yields control after sending a signal."
msgstr ""

#: ../../source/asyncio/unix_signals.rst:74
# 69d28dab417941809a829624b082ec08
msgid ":mod:`signal` -- Receive notification of asynchronous system events"
msgstr ""

