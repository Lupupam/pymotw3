# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/atexit/index.rst:3
# 42675ef13ff84397a48c591d40bf92c7
msgid "atexit --- Program Shutdown Callbacks"
msgstr ""

#: ../../source/atexit/index.rst:8
# aa12e8d64a6c4e3d9dbde051533161d2
msgid "Register function(s) to be called when a program is closing down."
msgstr ""

#: ../../source/atexit/index.rst:10
# c0ea77babb534e97b984ac5cc18220fa
msgid "The ``atexit`` module provides an interface to register functions to be called when a program closes down normally."
msgstr ""

#: ../../source/atexit/index.rst:14
# a6aad9d0c7764512bbf8c951788ccf70
msgid "Registering Exit Callbacks"
msgstr ""

#: ../../source/atexit/index.rst:19
# cd5cdbc73f0c4f54b15dcb2690745576
msgid "This is an example of registering a function explicitly by calling ``register()``."
msgstr ""

#: ../../source/atexit/index.rst:0
# 8e2733b86276429d9ffce2808ad26ee7
msgid "atexit_simple.py"
msgstr ""

#: ../../source/atexit/index.rst:26
# 99f2c169b7af4a70b5f9b81c27372ecf
msgid "Because the program does not do anything else, ``all_done()`` is called right away."
msgstr ""

#: ../../source/atexit/index.rst:43
# 9eecd9b80fae4dc083c7441d98fa1076
msgid "It is also possible to register more than one function and to pass arguments to the registered functions.  That can be useful to cleanly disconnect from databases, remove temporary files, etc.  Instead of keeping a list of resources that need to be freed, a separate clean-up function can be registered for each resource."
msgstr ""

#: ../../source/atexit/index.rst:0
# 42cb2f9fb24048688e998490c0b75bbf
msgid "atexit_multiple.py"
msgstr ""

#: ../../source/atexit/index.rst:53
# e66743121a0a4e8c85e1e22989aef740
msgid "The exit functions are called in the reverse of the order in which they are registered. This method allows modules to be cleaned up in the reverse order from which they are imported (and therefore register their ``atexit`` functions), which should reduce dependency conflicts."
msgstr ""

#: ../../source/atexit/index.rst:75
# 52dd586522d54d3baa5a4eb81567218b
msgid "Decorator Syntax"
msgstr ""

#: ../../source/atexit/index.rst:80
# 50683a83e1db4d61b6b01305451e5559
msgid "Functions that require no arguments can be registered by using ``register()`` as a decorator.  This alternative syntax is convenient for cleanup functions that operate on module-level global data."
msgstr ""

#: ../../source/atexit/index.rst:0
# cfcd615716f84caf95e69ae7b1691b00
msgid "atexit_decorator.py"
msgstr ""

#: ../../source/atexit/index.rst:89
# cf5d20091f3843c6b2cb9d231a6a89dc
msgid "Because the function is registered as it is defined, it is also important to ensure that it works properly even if no other work is performed by the module. If the resources it is supposed to clean up were never initialized, calling the exit callback should not produce an error."
msgstr ""

#: ../../source/atexit/index.rst:110
# e6e5a656bb1c4051b7ecd3a2d238b3ec
msgid "Canceling Callbacks"
msgstr ""

#: ../../source/atexit/index.rst:112
# e1304a91ba6e405fb16275f66dc43ddc
msgid "To cancel an exit callback, remove it from the registry using ``unregister()``."
msgstr ""

#: ../../source/atexit/index.rst:0
# 62bf6df1d7c24369a0481423f0a4d886
msgid "atexit_unregister.py"
msgstr ""

#: ../../source/atexit/index.rst:119
# 6cafeb70bb254994a722b5cca876160e
msgid "All calls to the same callback are canceled, regardless of how many times it has been registered."
msgstr ""

#: ../../source/atexit/index.rst:133
# e81639737e114ffe9d67d40718c247d8
msgid "Removing a callback that was not previously registered is not considered an error."
msgstr ""

#: ../../source/atexit/index.rst:0
# 810a52b8ab3a44c9898b3f8f16e54e10
msgid "atexit_unregister_not_registered.py"
msgstr ""

#: ../../source/atexit/index.rst:140
# 31926db407a640c1b11c5b6bdbf5bbcc
msgid "Because it silently ignores unknown callbacks, ``unregister()`` can be used even when the sequence of registrations might not be known."
msgstr ""

#: ../../source/atexit/index.rst:156
# 62bd7b5b2e874f90bebce7a542b2edcf
msgid "When Are atexit Callbacks Not Called?"
msgstr ""

#: ../../source/atexit/index.rst:158
# 57292c492a59415ca3a92ccca1bed520
msgid "The callbacks registered with ``atexit`` are not invoked if any of these conditions is met:"
msgstr ""

#: ../../source/atexit/index.rst:161
# 1217fc8945364fd8935a3f250255e1c1
msgid "The program dies because of a signal."
msgstr ""

#: ../../source/atexit/index.rst:163
# 5a93e77b7550496eabbc5cfe417d282c
msgid "``os._exit()`` is invoked directly."
msgstr ""

#: ../../source/atexit/index.rst:165
# 39f7043483804c19900d374e3af177b5
msgid "A fatal error is detected in the interpreter."
msgstr ""

#: ../../source/atexit/index.rst:167
# 1686c6cb9e504895a6ae72cc32ec435e
msgid "An example from the :mod:`subprocess` section can be updated to show what happens when a program is killed by a signal. Two files are involved, the parent and the child programs. The parent starts the child, pauses, then kills it."
msgstr ""

#: ../../source/atexit/index.rst:0
# bb3a27e76a8946649564b156dd3b1b8f
msgid "atexit_signal_parent.py"
msgstr ""

#: ../../source/atexit/index.rst:176
# 953567265d964519916ac8db9086b6fd
msgid "The child sets up an ``atexit`` callback, and then sleeps until the signal arrives."
msgstr ""

#: ../../source/atexit/index.rst:0
# 11e897a8dfdb4d4ea47f7e7c59eb2aca
msgid "atexit_signal_child.py"
msgstr ""

#: ../../source/atexit/index.rst:183
# 1d853225400a4efeb31da6f69c8867b3
msgid "When run, this is the output."
msgstr ""

#: ../../source/atexit/index.rst:200
# 49267f43f54a43f6ac03be07363db4c9
msgid "The child does not print the message embedded in ``not_called()``."
msgstr ""

#: ../../source/atexit/index.rst:202
# 5b2ef79fe65942bebffe263587fd81b0
msgid "If a program uses ``os._exit()``, it can avoid having the ``atexit`` callbacks invoked."
msgstr ""

#: ../../source/atexit/index.rst:0
# a6722d97a3a74143856e3ea02b7d3950
msgid "atexit_os_exit.py"
msgstr ""

#: ../../source/atexit/index.rst:209
# 99134829be574f8a93faea219b0f5cbf
msgid "Because this example bypasses the normal exit path, the callback is not run. The print output is also not flushed, so the example is run with the ``-u`` option to enable unbuffered I/O."
msgstr ""

#: ../../source/atexit/index.rst:227
# ed91f6f64a2b4fcc9b40f7e6dec174fa
msgid "To ensure that the callbacks are run, allow the program to terminate by running out of statements to execute or by calling ``sys.exit()``."
msgstr ""

#: ../../source/atexit/index.rst:0
# 4ea97f63334644019d16bfaee1ecd192
msgid "atexit_sys_exit.py"
msgstr ""

#: ../../source/atexit/index.rst:235
# a2a73ccc6d9b43a98724a7835d68f9ad
msgid "This example calls ``sys.exit()``, so the registered callbacks are invoked."
msgstr ""

#: ../../source/atexit/index.rst:255
# 3149d36b1ad44bd09036132f70405847
msgid "Handling Exceptions"
msgstr ""

#: ../../source/atexit/index.rst:257
# 737b190a24194d7da21dbd087435bbb5
msgid "Tracebacks for exceptions raised in ``atexit`` callbacks are printed to the console and the last exception raised is re-raised to be the final error message of the program."
msgstr ""

#: ../../source/atexit/index.rst:0
# 31a6cca67bac4035a24c72abcbdf23df
msgid "atexit_exception.py"
msgstr ""

#: ../../source/atexit/index.rst:265
# 9182119e543c48c49895844c82bea6cb
msgid "The registration order controls the execution order. If an error in one callback introduces an error in another (registered earlier, but called later), the final error message might not be the most useful error message to show the user."
msgstr ""

#: ../../source/atexit/index.rst:292
# e6e24d53ad2f4521a5e9d233a30a019a
msgid "It is usually best to handle and quietly log all exceptions in cleanup functions, since it is messy to have a program dump errors on exit."
msgstr ""

#: ../../source/atexit/index.rst:297
# 269757a91a8c4745839dda8b872a101d
msgid ":pydoc:`atexit`"
msgstr ""

#: ../../source/atexit/index.rst:299
# 1e5cafed4d1f4c6bbb67ae75316a7885
msgid ":ref:`sys-exceptions` -- Global handling for uncaught exceptions."
msgstr ""

#: ../../source/atexit/index.rst:302
# 1c74ec3dc920404a82156367de40ebb3
msgid ":ref:`Python 2 to 3 porting notes for atexit <porting-atexit>`"
msgstr ""

