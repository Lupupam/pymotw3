# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/concurrent.futures/index.rst:3
# 7e6493b243954ffbb6ea05e370e9413f
msgid "concurrent.futures --- Manage Pools of Concurrent Tasks"
msgstr ""

#: ../../source/concurrent.futures/index.rst:8
# 6cc460e9219840b5ba97fafb4bd82bf2
msgid "Easily manage tasks running concurrently and in parallel."
msgstr ""

#: ../../source/concurrent.futures/index.rst:10
# 5193d6bc57534e5ca6b49ddc67e26242
msgid "The ``concurrent.futures`` modules provides interfaces for running tasks using pools of thread or process workers. The APIs are the same, so applications can switch between threads and processes with minimal changes."
msgstr ""

#: ../../source/concurrent.futures/index.rst:15
# f6c42c5a7bb845758c2b25fbec411423
msgid "The module provides two types of classes for interacting with the pools. *Executors* are used for managing pools of workers, and *futures* are used for managing results computed by the workers. To use a pool of workers, an application creates an instance of the appropriate executor class and then submits tasks for it to run. When each task is started, a ``Future`` instance is returned. When the result of the task is needed, an application can use the ``Future`` to block until the result is available. Various APIs are provided to make it convenient to wait for tasks to complete, so that the ``Future`` objects do not need to be managed directly."
msgstr ""

#: ../../source/concurrent.futures/index.rst:27
# de4e1dedce714c168f5d602a5a89cd2c
msgid "Using map() with a Basic Thread Pool"
msgstr ""

#: ../../source/concurrent.futures/index.rst:29
# 2a6ca66e809d4da381b6c7f25cf33007
msgid "The ``ThreadPoolExecutor`` manages a set of worker threads, passing tasks to them as they become available for more work. This example uses ``map()`` to concurrently produce a set of results from an input iterable.  The task uses ``time.sleep()`` to pause a different amount of time to demonstrate that, regardless of the order of execution of concurrent tasks, ``map()`` always returns the values in order based on the inputs."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# 6612d5e275a149999c56f8e83b14e95e
msgid "futures_thread_pool_map.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:41
# b520646841aa41bc8f6559b0e8686369
msgid "The return value from ``map()`` is actually a special type of iterator that knows to wait for each response as the main program iterates over it."
msgstr ""

#: ../../source/concurrent.futures/index.rst:72
# e01b9bcaf82f4379837fd6a6478cb2a4
msgid "Scheduling Individual Tasks"
msgstr ""

#: ../../source/concurrent.futures/index.rst:74
# 02f98a76718042ed8a2acfb353e4bcaa
msgid "In addition to using ``map()``, it is possible to schedule an individual task with an executor using ``submit()``, and use the ``Future`` instance returned to wait for that task's results."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# 8b126fc4d1494509a42260f705806afd
msgid "futures_thread_pool_submit.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:82
# d9e7085804994c74bd797bf99fbbe9d2
msgid "The status of the future changes after the tasks is completed and the result is made available."
msgstr ""

#: ../../source/concurrent.futures/index.rst:105
# ecebbde6bb9b43d481ccdf31cd2b6fdb
msgid "Waiting for Tasks in Any Order"
msgstr ""

#: ../../source/concurrent.futures/index.rst:107
# 67d0d63cf0884d5697a0fcb512561332
msgid "Invoking the ``result()`` method of a ``Future`` blocks until the task completes (either by returning a value or raising an exception), or is canceled. The results of multiple tasks can be accessed in the order the tasks were scheduled using ``map()``. If it does not matter what order the results should be processed, use ``as_completed()`` to process them as each task finishes."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# d00ca8abc0574452ab915eda6c0bbecf
msgid "futures_as_completed.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:118
# 8f93900988ba4c0386c04a419b817ef0
msgid "Because the pool has as many workers as tasks, all of the tasks can be started. They finish in a random order so the values generated by ``as_completed()`` are different each time the example runs."
msgstr ""

#: ../../source/concurrent.futures/index.rst:140
# d83c15b3ca3046cca2058df592899990
msgid "Future Callbacks"
msgstr ""

#: ../../source/concurrent.futures/index.rst:142
# 6c5391fb79b3447888f27fe383a5f832
msgid "To take some action when a task completed, without explicitly waiting for the result, use ``add_done_callback()`` to specify a new function to call when the ``Future`` is done. The callback should be a callable taking a single argument, the ``Future`` instance."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# dd58d6cf93f6407cb568bd56de63db1b
msgid "futures_future_callback.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:151
# ab30e6244f734db6b9062f249eb05a7d
msgid "The callback is invoked regardless of the reason the ``Future`` is considered \"done,\" so it is necessary to check the status of the object passed in to the callback before using it in any way."
msgstr ""

#: ../../source/concurrent.futures/index.rst:171
# 66ec099ac9e544518c475b2c8945daf2
msgid "Canceling Tasks"
msgstr ""

#: ../../source/concurrent.futures/index.rst:173
# 218fbce8b908490da497338de15bbdf7
msgid "A ``Future`` can be canceled, if it has been submitted but not started, by calling its ``cancel()`` method."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# d475963aeba146d9aa52a0f1c7008a5a
msgid "futures_future_callback_cancel.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:180
# f207c2f3785d47bdaa3c9fd0eef8f1ef
msgid "``cancel()`` returns a Boolean indicating whether or not the task was able to be canceled."
msgstr ""

#: ../../source/concurrent.futures/index.rst:222
# 643e75a170794facabcbc1ba127e9219
msgid "Exceptions in Tasks"
msgstr ""

#: ../../source/concurrent.futures/index.rst:224
# 813a6fc6c78f46529a80dd56193a051b
msgid "If a task raises an unhandled exception, it is saved to the ``Future`` for the task and made available through the ``result()`` or ``exception()`` methods."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# ba11c300aae34252868d45afed3ab736
msgid "futures_future_exception.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:232
# ec059a7469054f138b9016b9c4fab686
msgid "If ``result()`` is called after an unhandled exception is raised within a task function, the same exception is re-raised in the current context."
msgstr ""

#: ../../source/concurrent.futures/index.rst:252
# ff28ba68dd4a4f1c9c2daf4badad220a
msgid "Context Manager"
msgstr ""

#: ../../source/concurrent.futures/index.rst:254
# bf04e2223a80440183e09028d7ac9266
msgid "Executors work as context managers, running tasks concurrently and waiting for them all to complete. When the context manager exits, the ``shutdown()`` method of the executor is called."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# 72ef12092ee5453b85daeb55a602ada6
msgid "futures_context_manager.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:262
# 5505b7d512fe456a813a8ad67aad4f6e
msgid "This mode of using the executor is useful when the thread or process resources should be cleaned up when execution leaves the current scope."
msgstr ""

#: ../../source/concurrent.futures/index.rst:284
# 35456a3d86b04ffe82428c3ffbd74eda
msgid "Process Pools"
msgstr ""

#: ../../source/concurrent.futures/index.rst:286
# 712811eeaf214114a4d12163ef732ec3
msgid "The ``ProcessPoolExecutor`` works in the same way as ``ThreadPoolExecutor``, but uses processes instead of threads. This allows CPU-intensive operations to use a separate CPU and not be blocked by the CPython interpreter's global interpreter lock."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# 6028722cad844f1b9f515381118d2731
msgid "futures_process_pool_map.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:296
# 7bc5a11be287484e9922e575bc1859ce
msgid "As with the thread pool, individual worker processes are reused for multiple tasks."
msgstr ""

#: ../../source/concurrent.futures/index.rst:315
# d4fe0148e9d14cc19e876f077ba3cb41
msgid "If something happens to one of the worker processes to cause it to exit unexpectedly, the ``ProcessPoolExecutor`` is considered \"broken\" and will no longer schedule tasks."
msgstr ""

#: ../../source/concurrent.futures/index.rst:0
# 17a4f9bf20154b3b9d8970f0d0f17574
msgid "futures_process_pool_broken.py"
msgstr ""

#: ../../source/concurrent.futures/index.rst:323
# 2f3f951f847f465c8840262a78c7db81
msgid "The ``BrokenProcessPool`` exception is actually thrown when the results are processed, rather than when the new task is submitted."
msgstr ""

#: ../../source/concurrent.futures/index.rst:346
# 2487f1bec5e14e4b990f2c61733e25bf
msgid ":pydoc:`concurrent.futures`"
msgstr ""

#: ../../source/concurrent.futures/index.rst:348
# 127ff6088f9243d69e65e3a859ec8891
msgid ":pep:`3148` -- The proposal for creating the ``concurrent.futures`` feature set."
msgstr ""

#: ../../source/concurrent.futures/index.rst:351
# 0e72479e425a44f59f91288a3bcdd814
msgid ":ref:`asyncio-executors`"
msgstr ""

#: ../../source/concurrent.futures/index.rst:353
# 00848a3730084d91ba060e9aaed40796
msgid ":mod:`threading`"
msgstr ""

#: ../../source/concurrent.futures/index.rst:355
# 3d84f88e68c74c85a5fa97aa0290c722
msgid ":mod:`multiprocessing`"
msgstr ""

