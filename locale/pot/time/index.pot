# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/time/index.rst:3
# 4642d6c5555f4b479636f3a07070ce4d
msgid "time --- Clock Time"
msgstr ""

#: ../../source/time/index.rst:8
# 9845464b6068430fa3e0d93a2e798594
msgid "Functions for manipulating clock time."
msgstr ""

#: ../../source/time/index.rst:10
# 101a056b458745bfb7626c430b62c39a
msgid "The ``time`` module provides access to several different types of clocks, each useful for different purposes. The standard system calls like ``time()`` report the system \"wall clock\" time. The ``monotonic()`` clock can be used to measure elapsed time in a long-running process because it is guaranteed never to move backwards, even if the system time is changed. For performance testing, ``perf_counter()`` provides access to the clock with the highest available resolution to make short time measurements more accurate. The CPU time is available through ``clock()``, and ``process_time()`` returns the combined processor time and system time."
msgstr ""

#: ../../source/time/index.rst:24
# 989a0d9a335c4974b8d6c1678db870ed
msgid "The implementations expose C library functions for manipulating dates and times.  Since they are tied to the underlying C implementation, some details (such as the start of the epoch and maximum date value supported) are platform-specific.  Refer to the library documentation for complete details."
msgstr ""

#: ../../source/time/index.rst:31
# 767ee6def5804d348c69ce45afda5a47
msgid "Comparing Clocks"
msgstr ""

#: ../../source/time/index.rst:33
# 35c4a06eaba8452981c893b332fdfe17
msgid "Implementation details for the clocks varies by platform. Use ``get_clock_info()`` to access basic information about the current implementation, including the clock's resolution."
msgstr ""

#: ../../source/time/index.rst:0
# c7a533dc5cf647209d5357acf7222f62
msgid "time_get_clock_info.py"
msgstr ""

#: ../../source/time/index.rst:41
# 75a01d19bc0a47ae8b1657d597ce6d92
msgid "This output for Mac OS X shows that the monotonic and perf_counter clocks are implemented using the same underlying system call."
msgstr ""

#: ../../source/time/index.rst:91
# 44235d17d2d34bd08f88aec8cd1b35a1
msgid "Wall Clock Time"
msgstr ""

#: ../../source/time/index.rst:93
# 69aabfa0e2404a22a29dd62c1a65fdcf
msgid "One of the core functions of the ``time`` module is ``time()``, which returns the number of seconds since the start of the \"epoch\" as a floating point value."
msgstr ""

#: ../../source/time/index.rst:0
# 3977fbe503c64164b6a82b033bb8bd01
msgid "time_time.py"
msgstr ""

#: ../../source/time/index.rst:101
# 044ee73dd4d64730aef5d79e007adde3
msgid "The epoch is the start of measurement for time, which for Unix systems is 0:00 on January 1, 1970. Although the value is always a float, actual precision is platform-dependent."
msgstr ""

#: ../../source/time/index.rst:117
# 89f17c6a8c22403e9e747349f4d64d19
msgid "The float representation is useful when storing or comparing dates, but not as useful for producing human readable representations. For logging or printing time ``ctime()`` can be more useful."
msgstr ""

#: ../../source/time/index.rst:0
# 5c08ca624c194e278c2fa92e47d59974
msgid "time_ctime.py"
msgstr ""

#: ../../source/time/index.rst:125
# b63267565c5946b4a349dd3274221c96
msgid "The second ``print()`` call in this example shows how to use ``ctime()`` to format a time value other than the current time."
msgstr ""

#: ../../source/time/index.rst:144
# 9f6f8a0c36bf478993c57c46d3751cbd
msgid "Monotonic Clocks"
msgstr ""

#: ../../source/time/index.rst:146
# a19ab620b13d495b96fd4b3309169191
msgid "Because ``time()`` looks at the system clock, and the system clock can be changed by the user or system services for synchronizing clocks across multiple computers, calling ``time()`` repeatedly may produce values that go forwards and backwards. This can result in unexpected behavior when trying to measure durations or otherwise use those times for computation. Avoid those situations by using ``monotonic()``, which always returns values that go forward."
msgstr ""

#: ../../source/time/index.rst:0
# 3dbae8bf1a0f4925a123ccc363a562d4
msgid "time_monotonic.py"
msgstr ""

#: ../../source/time/index.rst:158
# 5f34dd045c7046b7af6e412ddb1fbcef
msgid "The start point for the monotonic clock is not defined, so return values are only useful for doing calculations with other clock values. In this example the duration of the sleep is measured using ``monotonic()``."
msgstr ""

#: ../../source/time/index.rst:178
# 659576b076a548ebbd60fbee72e4e6be
msgid "Processor Clock Time"
msgstr ""

#: ../../source/time/index.rst:180
# 9e91b3a05370499c8d2257fe7fe8e40f
msgid "While ``time()`` returns a wall clock time, ``clock()`` returns processor clock time.  The values returned from ``clock()`` reflect the actual time used by the program as it runs."
msgstr ""

#: ../../source/time/index.rst:0
# 54451807ff734f5d824e0b43af802cee
msgid "time_clock.py"
msgstr ""

#: ../../source/time/index.rst:188
# c00b440ebef94d778ed4a491a5ebb2df
msgid "In this example, the formatted ``ctime()`` is printed along with the floating point values from ``time()``, and ``clock()`` for each iteration through the loop."
msgstr ""

#: ../../source/time/index.rst:194
# a5d4e19e9585492588410d678837b52a
msgid "If you want to run the example on your system, you may have to add more cycles to the inner loop or work with a larger amount of data to actually see a difference in the times."
msgstr ""

#: ../../source/time/index.rst:214
# df39ee76f32949139cc6528d597ad475
msgid "Typically, the processor clock does not tick if a program is not doing anything."
msgstr ""

#: ../../source/time/index.rst:0
# 94b15eb7d1574d578482328834ca5c29
msgid "time_clock_sleep.py"
msgstr ""

#: ../../source/time/index.rst:221
# 3942526428e74885a397e44029953c33
msgid "In this example, the loop does very little work by going to sleep after each iteration. The ``time()`` value increases even while the application is asleep, but the ``clock()`` value does not."
msgstr ""

#: ../../source/time/index.rst:243
# b6d8924cb7bd4cba886b6a3a4718d2eb
msgid "Calling ``sleep()`` yields control from the current thread and asks it to wait for the system to wake it back up. If a program has only one thread, this effectively blocks the app and it does no work."
msgstr ""

#: ../../source/time/index.rst:248
# 63f97ba68f0b4e9fb9e7ced4307f204b
msgid "Performance Counter"
msgstr ""

#: ../../source/time/index.rst:250
# 5023901b10214a35b347e621afdf6173
msgid "It is important to have a high-resolution monotonic clock for measuring performance. Determining the best clock data source requires platform-specific knowledge, which Python provides in ``perf_counter()``."
msgstr ""

#: ../../source/time/index.rst:0
# 45b9d93e18bd45c08b7a131d7c7b0406
msgid "time_perf_counter.py"
msgstr ""

#: ../../source/time/index.rst:259
# 933c9fef98f4428893f31f72e0405aef
msgid "As with ``monotonic()``, the epoch for ``perf_counter()`` is undefined, and the values are meant to be used for comparing and computing values, not as absolute times."
msgstr ""

#: ../../source/time/index.rst:280
# 7cfcddd4c6d94406a07f7245a627e2c5
msgid "Time Components"
msgstr ""

#: ../../source/time/index.rst:282
# 5ec8817b35a64c5195122246b639c58e
msgid "Storing times as elapsed seconds is useful in some situations, but there are times when a program needs to have access to the individual fields of a date (year, month, etc.). The ``time`` module defines ``struct_time`` for holding date and time values with components broken out so they are easy to access. There are several functions that work with ``struct_time`` values instead of floats."
msgstr ""

#: ../../source/time/index.rst:0
# 74e679cf92a142c2b5508e1c196b9122
msgid "time_struct.py"
msgstr ""

#: ../../source/time/index.rst:293
# 9b576e1d6a4f4b1a95fdeb9625d329fe
msgid "The ``gmtime()`` function returns the current time in UTC. ``localtime()`` returns the current time with the current time zone applied. ``mktime()`` takes a ``struct_time`` and converts it to the floating point representation."
msgstr ""

#: ../../source/time/index.rst:335
# bee0cbda4dd1464a9670ad57723725aa
msgid "Working with Time Zones"
msgstr ""

#: ../../source/time/index.rst:337
# faaac99bc886446e9b25b7849a265ed4
msgid "The functions for determining the current time depend on having the time zone set, either by the program or by using a default time zone set for the system. Changing the time zone does not change the actual time, just the way it is represented."
msgstr ""

#: ../../source/time/index.rst:342
# f474f88179e24adb8c55f0b8356fbdf7
msgid "To change the time zone, set the environment variable ``TZ``, then call ``tzset()``.  The time zone can be specified with a lot of detail, right down to the start and stop times for daylight savings time. It is usually easier to use the time zone name and let the underlying libraries derive the other information, though."
msgstr ""

#: ../../source/time/index.rst:348
# 0da2a5839b384ff780bd7fdbfc3066a6
msgid "This example program changes the time zone to a few different values and shows how the changes affect other settings in the time module."
msgstr ""

#: ../../source/time/index.rst:0
# 5c7c508dd96b479581c2b368a98c6c90
msgid "time_timezone.py"
msgstr ""

#: ../../source/time/index.rst:355
# c94c5065eddd4127be1091a08db100ff
msgid "The default time zone on the system used to prepare the examples is US/Eastern. The other zones in the example change the tzname, daylight flag, and timezone offset value."
msgstr ""

#: ../../source/time/index.rst:392
# 7ff5b2d419ff4ff589a8a0e3537af412
msgid "Parsing and Formatting Times"
msgstr ""

#: ../../source/time/index.rst:394
# a602ba396ddb4a1fa473e32e2943827c
msgid "The two functions ``strptime()`` and ``strftime()`` convert between ``struct_time`` and string representations of time values. There is a long list of formatting instructions available to support input and output in different styles. The complete list is documented in the library documentation for the ``time`` module."
msgstr ""

#: ../../source/time/index.rst:400
# ae8d2c860cad4fe89d2c33c2eb2caa72
msgid "This example converts the current time from a string to a ``struct_time`` instance and back to a string."
msgstr ""

#: ../../source/time/index.rst:0
# c1ab157e88b14463b47e4488bda57224
msgid "time_strptime.py"
msgstr ""

#: ../../source/time/index.rst:407
# 84651dd09ae9402fb6fdfcc4f44f30bb
msgid "The output string is not exactly like the input, since the day of the month is prefixed with a zero."
msgstr ""

#: ../../source/time/index.rst:437
# 55b062fb29be4f1cbbff9ea34c0117ce
msgid ":pydoc:`time`"
msgstr ""

#: ../../source/time/index.rst:439
# f3dcbea3d3bd4f47bef5ea64cc845cac
msgid ":ref:`Python 2 to 3 porting notes for time <porting-time>`"
msgstr ""

#: ../../source/time/index.rst:441
# fd48deca9acb4235a400ac50a21d0c3c
msgid ":mod:`datetime` -- The ``datetime`` module includes other classes for doing calculations with dates and times."
msgstr ""

#: ../../source/time/index.rst:444
# 72f88653b1f04c3bb66a3fde29a85476
msgid ":mod:`calendar` -- Work with higher-level date functions to produce calendars or calculate recurring events."
msgstr ""

