# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/abc/index.rst:3
# e51c2bedb4fc4807841f3a28e5c1bdeb
msgid "abc --- Abstract Base Classes"
msgstr ""

#: ../../source/abc/index.rst:8
# 1bf4b516094a401b92d1d58fe858edbb
msgid "Define and use abstract base classes for interface verification."
msgstr ""

#: ../../source/abc/index.rst:11
# cf4645fb9bc649aca51f8f302c62a2e7
msgid "Why use Abstract Base Classes?"
msgstr ""

#: ../../source/abc/index.rst:13
# 493e100def554dc3b1613fa4d361ba27
msgid "Abstract base classes are a form of interface checking more strict than individual ``hasattr()`` checks for particular methods.  By defining an abstract base class, a common API can be established for a set of subclasses.  This capability is especially useful in situations where someone less familiar with the source for an application is going to provide plug-in extensions, but can also help when working on a large team or with a large code-base where keeping track of all of the classes at the same time is difficult or not possible."
msgstr ""

#: ../../source/abc/index.rst:23
# 498fcba828dd4b23845bf93e6e9ee7b5
msgid "How ABCs Work"
msgstr ""

#: ../../source/abc/index.rst:25
# 8b0bfb9a1ef64b3bbe58f532b8586f56
msgid "``abc`` works by marking methods of the base class as abstract, and then registering concrete classes as implementations of the abstract base.  If an application or library requires a particular API, ``issubclass()`` or ``isinstance()`` can be used to check an object against the abstract class."
msgstr ""

#: ../../source/abc/index.rst:31
# 25fb490556694f01bb20d2b702622faf
msgid "To start, define an abstract base class to represent the API of a set of plug-ins for saving and loading data.  Set the metaclass for the new base class to ``ABCMeta``, and use decorators to establish the public API for the class.  The following examples use ``abc_base.py``."
msgstr ""

#: ../../source/abc/index.rst:0
# bdd70b90e7cf45e8bb181a0c96659a2f
msgid "abc_base.py"
msgstr ""

#: ../../source/abc/index.rst:43
# f0687af71d31416db944423d0e38d7b6
msgid "Registering a Concrete Class"
msgstr ""

#: ../../source/abc/index.rst:45
# a2ac293e755f4bd585b699096cb7ff8a
msgid "There are two ways to indicate that a concrete class implements an abstract API: either explicitly register the class or create a new subclass directly from the abstract base.  Use the ``register()`` class method as a decorator on a concrete class to add it explicitly when the class provides the required API, but is not part of the inheritance tree of the abstract base class."
msgstr ""

#: ../../source/abc/index.rst:0
# cdecaf923f2d4525be84d6e618b0ee68
msgid "abc_register.py"
msgstr ""

#: ../../source/abc/index.rst:56
# f409dad0e0b34ceca95b7396aecaf987
msgid "In this example the ``RegisteredImplementation`` is derived from ``LocalBaseClass``, but is registered as implementing the ``PluginBase`` API so ``issubclass()`` and ``isinstance()`` treat it as though it is derived from ``PluginBase``."
msgstr ""

#: ../../source/abc/index.rst:76
# de672e22804743ac9505cd823d8c4f47
msgid "Implementation Through Subclassing"
msgstr ""

#: ../../source/abc/index.rst:78
# 929ce663b2934af78c3b909139f2cfc2
msgid "Subclassing directly from the base avoids the need to register the class explicitly."
msgstr ""

#: ../../source/abc/index.rst:0
# 2798b4af49884dbe8c81b14b7f987c40
msgid "abc_subclass.py"
msgstr ""

#: ../../source/abc/index.rst:85
# a8fd375e54dd42ed929ee058c815e77c
msgid "In this case, normal Python class management features are used to recognize ``SubclassImplementation`` as implementing the abstract ``PluginBase``."
msgstr ""

#: ../../source/abc/index.rst:102
# b0a75c6c31f94ce491842ed910b5199c
msgid "A side effect of using direct subclassing is it is possible to find all of the implementations of a plug-in by asking the base class for the list of known classes derived from it (this is not an ``abc`` feature, all classes can do this)."
msgstr ""

#: ../../source/abc/index.rst:0
# 8ce7bbe625e64097b615076b7341dd31
msgid "abc_find_subclasses.py"
msgstr ""

#: ../../source/abc/index.rst:111
# c32162f4e2694ee28805667f6b15bd57
msgid "Even though ``abc_register()`` is imported, ``RegisteredImplementation`` is not among the list of subclasses because it is not actually derived from the base."
msgstr ""

#: ../../source/abc/index.rst:128
# 904c7579ce694a438e351c809ff3057b
msgid "Helper Base Class"
msgstr ""

#: ../../source/abc/index.rst:130
# 562adbb959b14dc5968433e79b2f0412
msgid "Forgetting to set the metaclass properly means the concrete implementations do not have their APIs enforced. To make it easier to set up the abstract class properly, a base class is provided that sets the metaclass automatically."
msgstr ""

#: ../../source/abc/index.rst:0
# 2f516ca8e0ad4d409450293f93cf9d4f
msgid "abc_abc_base.py"
msgstr ""

#: ../../source/abc/index.rst:139
# 84f95852dc1b4b79a0c88b6bb9dffad9
msgid "To create a new abstract class, simply inherit from ``ABC``."
msgstr ""

#: ../../source/abc/index.rst:155
# d95421b1a5d7439297172841b1ba1bbc
msgid "Incomplete Implementations"
msgstr ""

#: ../../source/abc/index.rst:157
# 0369159c9cef4293b5985f524e75062d
msgid "Another benefit of subclassing directly from the abstract base class is that the subclass cannot be instantiated unless it fully implements the abstract portion of the API."
msgstr ""

#: ../../source/abc/index.rst:0
# 78cd6bc1c2824ca9a30b9231706591e7
msgid "abc_incomplete.py"
msgstr ""

#: ../../source/abc/index.rst:165
# 083833b3a3134e54aba97dc4720f8744
msgid "This keeps incomplete implementations from triggering unexpected errors at runtime."
msgstr ""

#: ../../source/abc/index.rst:188
# 37a31cd61b5044c3b895c710176dad4c
msgid "Concrete Methods in ABCs"
msgstr ""

#: ../../source/abc/index.rst:190
# c5e25bdddbaf413b8cadea8f8838cd5d
msgid "Although a concrete class must provide implementations of all abstract methods, the abstract base class can also provide implementations that can be invoked via ``super()``.  This allows common logic to be reused by placing it in the base class, but forces subclasses to provide an overriding method with (potentially) custom logic."
msgstr ""

#: ../../source/abc/index.rst:0
# cfb90707c6d347168b76c24659148b7f
msgid "abc_concrete_method.py"
msgstr ""

#: ../../source/abc/index.rst:200
# 4b98bb265cf842ac88bdae79f7f7bc60
msgid "Since ``ABCWithConcreteImplementation()`` is an abstract base class, it is not possible to instantiate it to use it directly.  Subclasses *must* provide an override for ``retrieve_values()``, and in this case the concrete class sorts the data before returning it."
msgstr ""

#: ../../source/abc/index.rst:223
# 20500d9e163a41fa9f8ff88bf404670f
msgid "Abstract Properties"
msgstr ""

#: ../../source/abc/index.rst:225
# 65439745d9094a2f88819b0bf54f25cf
msgid "If an API specification includes attributes in addition to methods, it can require the attributes in concrete classes by combining ``abstractmethod()`` with ``property()``."
msgstr ""

#: ../../source/abc/index.rst:0
# 15f380ea204b488ea79c47f02cb1d7ef
msgid "abc_abstractproperty.py"
msgstr ""

#: ../../source/abc/index.rst:233
# df0b36403c71409fad736c1aa786d625
msgid "The ``Base`` class in the example cannot be instantiated because it has only an abstract version of the property getter methods for ``value`` and ``constant``.  The ``value`` property is given a concrete getter in ``Implementation`` and ``constant`` is defined using a class attribute."
msgstr ""

#: ../../source/abc/index.rst:255
# 7b191996625744ba8cac0104c60aec7c
msgid "Abstract read-write properties can also be defined."
msgstr ""

#: ../../source/abc/index.rst:0
# 7aeea1ead9684cd08612fa4db698e278
msgid "abc_abstractproperty_rw.py"
msgstr ""

#: ../../source/abc/index.rst:261
# d65247c9ca734484bcf3131f3b4537b7
msgid "The concrete property must be defined the same way as the abstract property, as either read-write or read-only.  Overriding a read-write property in ``PartialImplementation`` with one that is read-only leaves the property read-only -- the property's setter method from the base class is not reused."
msgstr ""

#: ../../source/abc/index.rst:285
# fa2b923e585b4699a86f4c810823acbf
msgid "To use the decorator syntax with read-write abstract properties, the methods to get and set the value must be named the same."
msgstr ""

#: ../../source/abc/index.rst:289
# 50814cf8fbd84acfb86de28041c7c723
msgid "Abstract Class and Static Methods"
msgstr ""

#: ../../source/abc/index.rst:291
# 5eed346b7af44239beb925dd1b1867e1
msgid "Class and static methods can also be marked as abstract."
msgstr ""

#: ../../source/abc/index.rst:0
# 63bf782851474d1ba87fb65cbf89721e
msgid "abc_class_static.py"
msgstr ""

#: ../../source/abc/index.rst:297
# c74f1407db344de9b9dea4d47f5b5667
msgid "Although the class method is invoked on the class rather than an instance, it still prevents the class from being instantiated if it is not defined."
msgstr ""

#: ../../source/abc/index.rst:317
# 68d6b97d21c34f5eac7de0a311645022
msgid ":pydoc:`abc`"
msgstr ""

#: ../../source/abc/index.rst:319
# 6995bfdb68db4705a6cd9b520f939ccc
msgid ":pep:`3119` -- Introducing Abstract Base Classes"
msgstr ""

#: ../../source/abc/index.rst:321
# 856527b0b7704d7ca6323ad3fb7adc9c
msgid ":mod:`collections` -- The collections module includes abstract base classes for several collection types."
msgstr ""

#: ../../source/abc/index.rst:324
# bbe5554ac1444efa914cc355054cbbee
msgid ":pep:`3141` -- A Type Hierarchy for Numbers"
msgstr ""

#: ../../source/abc/index.rst:326
# 240a8826cf33456fb9de3e4302c17952
msgid "`Wikipedia: Strategy Pattern <https://en.wikipedia.org/wiki/Strategy_pattern>`_ -- Description and examples of the strategy pattern, a common plug-in implementation pattern."
msgstr ""

#: ../../source/abc/index.rst:331
# 3ced83f56dce46f6a995e00fa781facc
msgid "`Dynamic Code Patterns: Extending Your Applications With Plugins <http://pyvideo.org/pycon-us-2013/dynamic-code-patterns-extending-your-application.html>`__ -- PyCon 2013 presentation by Doug Hellmann"
msgstr ""

#: ../../source/abc/index.rst:335
# d04ce55944f941f9b727bb91f957ff22
msgid ":ref:`Python 2 to 3 porting notes for abc <porting-abc>`"
msgstr ""

