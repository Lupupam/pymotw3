# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/mmap/index.rst:3
# 70dd4bea86fc44618e1cfeba35dcede2
msgid "mmap --- Memory-map Files"
msgstr ""

#: ../../source/mmap/index.rst:8
# c92b95c99df748d4832e138d775bbbb9
msgid "Memory-map files instead of reading the contents directly."
msgstr ""

#: ../../source/mmap/index.rst:10
# 8c9a6780e35d4058ae88e734b6d29ea7
msgid "Memory-mapping a file uses the operating system virtual memory system to access the data on the file system directly, instead of using normal I/O functions.  Memory-mapping typically improves I/O performance because it does not involve a separate system call for each access and it does not require copying data between buffers -- the memory is accessed directly by both the kernel and the user application."
msgstr ""

#: ../../source/mmap/index.rst:17
# ab461bc98cd04466bec75d7ebb9c18ff
msgid "Memory-mapped files can be treated as mutable strings or file-like objects, depending on the need. A mapped file supports the expected file API methods, such as ``close()``, ``flush()``, ``read()``, ``readline()``, ``seek()``, ``tell()``, and ``write()``. It also supports the string API, with features such as slicing and methods like ``find()``."
msgstr ""

#: ../../source/mmap/index.rst:24
# becc00cd97c143e9b04466d9ca446bb7
msgid "All of the examples use the text file ``lorem.txt``, containing a bit of Lorem Ipsum. For reference, the text of the file is"
msgstr ""

#: ../../source/mmap/index.rst:0
# 3b9dd4beb0204fa595656d6c39d9327b
msgid "lorem.txt"
msgstr ""

#: ../../source/mmap/index.rst:32
# 2cd3d747ed4d46c4a9bd56bd04d0c9de
msgid "There are differences in the arguments and behaviors for ``mmap()`` between Unix and Windows, which are not fully discussed here. For more details, refer to the standard library documentation."
msgstr ""

#: ../../source/mmap/index.rst:37
# 26fcdfb8573b4242ae5546433abe78c8
msgid "Reading"
msgstr ""

#: ../../source/mmap/index.rst:39
# 37304a52c9a74676a03ba7a893c65f67
msgid "Use the ``mmap()`` function to create a memory-mapped file.  The first argument is a file descriptor, either from the ``fileno()`` method of a ``file`` object or from ``os.open()``. The caller is responsible for opening the file before invoking ``mmap()``, and closing it after it is no longer needed."
msgstr ""

#: ../../source/mmap/index.rst:45
# d113b9d4af5141cea45098e652a97de5
msgid "The second argument to ``mmap()`` is a size in bytes for the portion of the file to map. If the value is ``0``, the entire file is mapped. If the size is larger than the current size of the file, the file is extended."
msgstr ""

#: ../../source/mmap/index.rst:52
# 701d46d5d2814237ac104b15235f9643
msgid "Windows does not support creating a zero-length mapping."
msgstr ""

#: ../../source/mmap/index.rst:54
# 9722b813e7c6413b8782f6e5d334db0c
msgid "An optional keyword argument, ``access``, is supported by both platforms. Use ``ACCESS_READ`` for read-only access, ``ACCESS_WRITE`` for write-through (assignments to the memory go directly to the file), or ``ACCESS_COPY`` for copy-on-write (assignments to memory are not written to the file)."
msgstr ""

#: ../../source/mmap/index.rst:0
# 602368ab63e64b8da6cbaa285745fd5c
msgid "mmap_read.py"
msgstr ""

#: ../../source/mmap/index.rst:64
# 8259a281024541d9b1ac1fb9ee2af657
msgid "The file pointer tracks the last byte accessed through a slice operation.  In this example, the pointer moves ahead 10 bytes after the first read.  It is then reset to the beginning of the file by the slice operation, and moved ahead 10 bytes again by the slice.  After the slice operation, calling ``read()`` again gives the bytes 11-20 in the file."
msgstr ""

#: ../../source/mmap/index.rst:86
# bd9b0680a0d5461dbe2c189466b0df7c
msgid "Writing"
msgstr ""

#: ../../source/mmap/index.rst:88
# fa67b8d721474901b720b77ba0c9150a
msgid "To set up the memory mapped file to receive updates, start by opening it for appending with mode ``'r+'`` (not ``'w'``) before mapping it. Then use any of the API methods that change the data (``write()``, assignment to a slice, etc.)."
msgstr ""

#: ../../source/mmap/index.rst:93
# dd5413fddaa24350aefbfe13d1250347
msgid "The next example uses the default access mode of ``ACCESS_WRITE`` and assigning to a slice to modify part of a line in place."
msgstr ""

#: ../../source/mmap/index.rst:0
# 5eec34a949a74ba19e42d1fadc8875ca
msgid "mmap_write_slice.py"
msgstr ""

#: ../../source/mmap/index.rst:100
# 10aaf8c73ab74ac5bd42327794efd3b2
msgid "The word \"``consectetuer``\" is replaced in the middle of the first line in memory and in the file."
msgstr ""

#: ../../source/mmap/index.rst:123
# 5c39782f730f471aa3cc9b53dc152d49
msgid "Copy Mode"
msgstr ""

#: ../../source/mmap/index.rst:125
# d0767080680d4b9e94af177c506e0c89
msgid "Using the access setting ``ACCESS_COPY`` does not write changes to the file on disk."
msgstr ""

#: ../../source/mmap/index.rst:0
# 0d134462fd1b45829f962b6e30026105
msgid "mmap_write_copy.py"
msgstr ""

#: ../../source/mmap/index.rst:132
# ce74d305062f4ff4b8367e4d81198a8e
msgid "It is necessary to rewind the file handle in this example separately from the ``mmap`` handle, because the internal state of the two objects is maintained separately."
msgstr ""

#: ../../source/mmap/index.rst:157
# c98e7d36d7be4d52b1213b23d7c644f0
msgid "Regular Expressions"
msgstr ""

#: ../../source/mmap/index.rst:159
# 8e930608b32644ad9c6027ba34a5b6f4
msgid "Since a memory mapped file can act like a string, it can be used with other modules that operate on strings, such as regular expressions. This example finds all of the sentences with \"``nulla``\" in them."
msgstr ""

#: ../../source/mmap/index.rst:0
# dece765e2a2849f69484c75740b6fb66
msgid "mmap_regex.py"
msgstr ""

#: ../../source/mmap/index.rst:168
# c31aff2a7377444e9dfff757cee3f37f
msgid "Because the pattern includes two groups, the return value from ``findall()`` is a sequence of tuples. The ``print`` statement pulls out the matching sentence and replaces newlines with spaces so each result prints on a single line."
msgstr ""

#: ../../source/mmap/index.rst:189
# acbb42817a804afeb7ccac5c320acaec
msgid ":pydoc:`mmap`"
msgstr ""

#: ../../source/mmap/index.rst:191
# 628dfad7acad42aaba023a2efeffe69a
msgid ":ref:`Python 2 to 3 porting notes for mmap <porting-mmap>`"
msgstr ""

#: ../../source/mmap/index.rst:193
# c79d77e74db54bd8b3da0f277ad9587b
msgid ":mod:`os` -- The ``os`` module."
msgstr ""

#: ../../source/mmap/index.rst:195
# 3f29c2abe9cc417cb8c1a1ef09e3de0c
msgid ":mod:`re` -- Regular expressions."
msgstr ""

