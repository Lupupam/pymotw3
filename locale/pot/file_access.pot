# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/file_access.rst:3
# 0894427586744903891455b65170e422
msgid "The File System"
msgstr ""

#: ../../source/file_access.rst:5
# 096014d918a9451a90b11f6341ec4764
msgid "Python's standard library includes a large range of tools for working with files on the file system, building and parsing filenames, and examining file contents."
msgstr ""

#: ../../source/file_access.rst:9
# 28fccb37d3544d55ab3a0be443f91e3c
msgid "The first step in working with files is to determine the name of the file to work on.  Python represents filenames as simple strings, but provides tools for building them from standard, platform-independent, components in :mod:`os.path`."
msgstr ""

#: ../../source/file_access.rst:14
# 2517ea95e4874ff29645a8d48b90dca6
msgid "The :mod:`pathlib` module provides an object-oriented API for working with file system paths. Using it instead of :mod:`os.path` provides some conveniences because it operates at a higher level of abstraction."
msgstr ""

#: ../../source/file_access.rst:19
# a6a0286ad2394e06af8c3ac846921a86
msgid "List the contents of a directory with ``listdir()`` from :mod:`os`, or use :mod:`glob` to build a list of filenames from a pattern."
msgstr ""

#: ../../source/file_access.rst:23
# 1bf6563bb8c14783806a932a5ac01393
msgid "The file name pattern matching used by :mod:`glob` is also exposed directly through :mod:`fnmatch` so it can be used in other contexts."
msgstr ""

#: ../../source/file_access.rst:26
# b180d3e8c3f8488098b981758ad9c41c
msgid "After the name of the file is identified, other characteristics, such as permissions or the file size, can be checked using ``os.stat()`` and the constants in :mod:`stat`."
msgstr ""

#: ../../source/file_access.rst:30
# b8cdf9e8a8114458aed1ce1b518ec7bc
msgid "When an application needs random access to files, :mod:`linecache` makes it easy to read lines by their line number.  The contents of the file are maintained in a cache, so be careful of memory consumption."
msgstr ""

#: ../../source/file_access.rst:34
# 09f4c3401b9e4bbb9d611391c5432ae4
msgid ":mod:`tempfile` is useful for cases that need to create scratch files to hold data temporarily, or before moving it to a permanent location. It provides classes to create temporary files and directories safely and securely.  Names are guaranteed to be unique, and include random components so they are not easily guessable."
msgstr ""

#: ../../source/file_access.rst:40
# f850493c88d543a0a98542b07a4b3232
msgid "Frequently, programs need to work on files as a whole, without regard to their content.  The :mod:`shutil` module includes high-level file operations such as copying files and directories, and creating or extracting archives of files."
msgstr ""

#: ../../source/file_access.rst:45
# f31e2bbf22be43e6bdae3e7514324249
msgid "The :mod:`filecmp` module compares files and directories by looking at the bytes they contain, but without any special knowledge about their format."
msgstr ""

#: ../../source/file_access.rst:49
# 0f9dc823be6e4c75b46da86e10bae99b
msgid "The built-in ``file`` class can be used to read and write files visible on local file systems.  A program's performance can suffer when it accesses large files through the ``read()`` and ``write()`` interfaces, though, since they both involve copying the data multiple times as it is moved from the disk to memory the application can see.  Using :mod:`mmap` tells the operating system to use its virtual memory subsystem to map a file's contents directly into memory accessible by a program, avoiding a copy step between the operating system and the internal buffer for the ``file`` object."
msgstr ""

#: ../../source/file_access.rst:59
# d3e14c6e39d44b14bb4563f7b6aacede
msgid "Text data using characters not available in ASCII is usually saved in a Unicode data format.  Since the standard ``file`` handle assumes each byte of a text file represents one character, reading Unicode text with multi-byte encodings requires extra processing.  The :mod:`codecs` module handles the encoding and decoding automatically, so that in many cases a non-ASCII file can be used without any other changes to the program."
msgstr ""

#: ../../source/file_access.rst:67
# 9c201706d4494e6e8ffc162e4db6c563
msgid "The :mod:`io` module provides access to the classes used to implement Python's file-based input and output.  For testing code that depends on reading or writing data from files, :mod:`io` provides an in-memory stream object that behaves like a file, but does not reside on disk."
msgstr ""

