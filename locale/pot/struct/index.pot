# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/struct/index.rst:3
# e4450c1912fc45c5857a9a254e20dfd6
msgid "struct --- Binary Data Structures"
msgstr ""

#: ../../source/struct/index.rst:8
# fa6ec581716a4e1da1fa2f02219e666a
msgid "Convert between strings and binary data."
msgstr ""

#: ../../source/struct/index.rst:10
# faa40689b1c24ce6b42f36ed6f046991
msgid "The ``struct`` module includes functions for converting between strings of bytes and native Python data types such as numbers and strings."
msgstr ""

#: ../../source/struct/index.rst:15
# f3cce038f7124e049ad01af27664dc52
msgid "Functions versus Struct Class"
msgstr ""

#: ../../source/struct/index.rst:17
# 01a03ffd0b2d448eb79a4b236e1af18f
msgid "A set of module-level functions is available for working with structured values, as well as the ``Struct`` class.  Format specifiers are converted from their string format to a compiled representation, similar to the way regular expressions are handled. The conversion takes some resources, so it is typically more efficient to do it once when creating a ``Struct`` instance and call methods on the instance instead of using the module-level functions. All of the following examples use the ``Struct`` class."
msgstr ""

#: ../../source/struct/index.rst:27
# 49363183cb174efab2be2432b09a1c8a
msgid "Packing and Unpacking"
msgstr ""

#: ../../source/struct/index.rst:29
# 265f815fa3914e4b8a576ce76e1e35a5
msgid "Structs support *packing* data into strings, and *unpacking* data from strings using format specifiers made up of characters representing the type of the data and optional count and endianness indicators.  Refer to the standard library documentation for a complete list of the supported format specifiers."
msgstr ""

#: ../../source/struct/index.rst:35
# 54bd991515a443f4b02a8f2187ae5520
msgid "In this example, the specifier calls for an integer or long integer value, a two-byte string, and a floating-point number.  The spaces in the format specifier are included to separate the type indicators, and are ignored when the format is compiled."
msgstr ""

#: ../../source/struct/index.rst:0
# 007d46504bf44b0280184cb120c21afa
msgid "struct_pack.py"
msgstr ""

#: ../../source/struct/index.rst:44
# 34386b6b0f1742779ffb2e08248ff166
msgid "The example converts the packed value to a sequence of hex bytes for printing with ``binascii.hexlify()``, since some of the characters are nulls."
msgstr ""

#: ../../source/struct/index.rst:63
# eb4c1bcee05b45e698e9d14046a0c46e
msgid "Use ``unpack()`` to extract data from its packed representation."
msgstr ""

#: ../../source/struct/index.rst:0
# 0abbf96725a645ac89f1e7828f4a38b6
msgid "struct_unpack.py"
msgstr ""

#: ../../source/struct/index.rst:69
# 7555b4e5007f4f5e8de8dfba92d121ac
msgid "Passing the packed value to ``unpack()``, gives basically the same values back (note the discrepancy in the floating point value)."
msgstr ""

#: ../../source/struct/index.rst:86
# 61d05aef5e284197b1e010249747abf7
msgid "Endianness"
msgstr ""

#: ../../source/struct/index.rst:88
# 670656e9b69d44148658a7fcc79d3c53
msgid "By default, values are encoded using the native C library notion of *endianness*.  It is easy to override that choice by providing an explicit endianness directive in the format string."
msgstr ""

#: ../../source/struct/index.rst:0
# 3231816e87414db9aa1a3accc13f4265
msgid "struct_endianness.py"
msgstr ""

#: ../../source/struct/index.rst:96
# 88dbc161087c42449caa64ac17e90092
msgid ":table:`Byte Order Specifiers for struct` lists the byte order specifiers used by ``Struct``."
msgstr ""

#: ../../source/struct/index.rst:0
# 38a06c4ad4c843a7abd3bf1c0832eae7
msgid "Byte Order Specifiers for struct"
msgstr ""

#: ../../source/struct/index.rst:102
# b15fc39ffb9744e1a089dea7540a94c1
msgid "Code"
msgstr ""

#: ../../source/struct/index.rst:102
# 91b030c8b3b941b4aa10af8e51d08767
msgid "Meaning"
msgstr ""

#: ../../source/struct/index.rst:104
# 280da933bab9422fbe900319da6774fa
msgid "``@``"
msgstr ""

#: ../../source/struct/index.rst:104
# 2fe68d6206e14049b17c04f1ff51faa1
msgid "Native order"
msgstr ""

#: ../../source/struct/index.rst:105
# bd43b733d014451b97498a98f95963a8
msgid "``=``"
msgstr ""

#: ../../source/struct/index.rst:105
# 32728d1dd23b4f109f896a76eb21bf55
msgid "Native standard"
msgstr ""

#: ../../source/struct/index.rst:106
# 57d62b064aca467eba9bfb463c0d5e23
msgid "``<``"
msgstr ""

#: ../../source/struct/index.rst:106
# 331c96f2108e40a9a701e4f8926acd2d
msgid "little-endian"
msgstr ""

#: ../../source/struct/index.rst:107
# 2811e76b104b428eac3473dc59dc2c93
msgid "``>``"
msgstr ""

#: ../../source/struct/index.rst:107
# deadf3635f9149a990cea368cbcaeb4d
msgid "big-endian"
msgstr ""

#: ../../source/struct/index.rst:108
# 8543aae5f1b7423fadf0bcbe7903e94b
msgid "``!``"
msgstr ""

#: ../../source/struct/index.rst:108
# e2faf1c29e874631811801878e17f813
msgid "Network order"
msgstr ""

#: ../../source/struct/index.rst:149
# 634ba2281336463487d58aa1aa747dde
msgid "Buffers"
msgstr ""

#: ../../source/struct/index.rst:151
# 43524a0b12e64ccd93937f50441b6b9a
msgid "Working with binary packed data is typically reserved for performance-sensitive situations or passing data into and out of extension modules.  These cases can be optimized by avoiding the overhead of allocating a new buffer for each packed structure.  The :meth:`pack_into` and :meth:`unpack_from` methods support writing to pre-allocated buffers directly."
msgstr ""

#: ../../source/struct/index.rst:0
# 2655e6f1f6a94ecc891676cd29038eb8
msgid "struct_buffers.py"
msgstr ""

#: ../../source/struct/index.rst:162
# e78a27f604724c8f84fe460849505564
msgid "The ``size`` attribute of the ``Struct`` tells us how big the buffer needs to be."
msgstr ""

#: ../../source/struct/index.rst:190
# 68e6b3ea19714bf489c58f92b80342f3
msgid ":pydoc:`struct`"
msgstr ""

#: ../../source/struct/index.rst:192
# f594832d28d24372b3ef839833a3f63a
msgid ":ref:`Python 2 to 3 porting notes for struct <porting-struct>`"
msgstr ""

#: ../../source/struct/index.rst:194
# 77b31ad562eb4217bb0f4f187d22ed59
msgid ":mod:`array` -- The ``array`` module, for working with sequences of fixed-type values."
msgstr ""

#: ../../source/struct/index.rst:197
# 1c7d9738c6534c839469f63fd3bf40ce
msgid ":mod:`binascii` -- The ``binascii`` module, for producing ASCII representations of binary data."
msgstr ""

#: ../../source/struct/index.rst:200
# 3afbd2c660d845a898d4d3f8384c75ec
msgid "`WikiPedia: Endianness <https://en.wikipedia.org/wiki/Endianness>`_ -- Explanation of byte order and endianness in encoding."
msgstr ""

