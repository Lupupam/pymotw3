# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/operator/index.rst:3
# f4eeafef13a54feca66a6f3a1f7d630e
msgid "operator --- Functional Interface to Built-in Operators"
msgstr ""

#: ../../source/operator/index.rst:8
# d62746b062cd4b36a6ea4af55e2c617a
msgid "Functional interface to built-in operators."
msgstr ""

#: ../../source/operator/index.rst:10
# a38c0be6e76e4bd8bda199caceca7917
msgid "Programming using iterators occasionally requires creating small functions for simple expressions. Sometimes, these can be implemented as ``lambda`` functions, but for some operations new functions are not needed at all.  The ``operator`` module defines functions that correspond to built-in operations for arithmetic, comparison, and other operations corresponding to standard object APIs."
msgstr ""

#: ../../source/operator/index.rst:18
# 910156ebcb344f818b2c702752cca2e1
msgid "Logical Operations"
msgstr ""

#: ../../source/operator/index.rst:20
# ed7bffef396047b9970f876d39e5a14a
msgid "There are functions for determining the boolean equivalent for a value, negating it to create the opposite boolean value, and comparing objects to see if they are identical."
msgstr ""

#: ../../source/operator/index.rst:0
# 119a9ef3bd92407399985d4295109994
msgid "operator_boolean.py"
msgstr ""

#: ../../source/operator/index.rst:28
# 7711785f2a48428d868e54e575be5b04
msgid "``not_()`` includes the trailing underscore because ``not`` is a Python keyword.  ``truth()`` applies the same logic used when testing an expression in an ``if`` statement or converting an expression to a ``bool``.  ``is_()`` implements the same check used by the ``is`` keyword, and ``is_not()`` does the same test and returns the opposite answer."
msgstr ""

#: ../../source/operator/index.rst:55
# c8b30c6dbbe54b3eba4390f3d249f370
msgid "Comparison Operators"
msgstr ""

#: ../../source/operator/index.rst:57
# 13e21a31db744c0f874d1724c20f1627
msgid "All of the rich comparison operators are supported."
msgstr ""

#: ../../source/operator/index.rst:0
# a87c4b0d3b714919908d755f49c2a37f
msgid "operator_comparisons.py"
msgstr ""

#: ../../source/operator/index.rst:63
# f889e5680bbb490589579a291bec93ae
msgid "The functions are equivalent to the expression syntax using ``<``, ``<=``, ``==``, ``>=``, and ``>``."
msgstr ""

#: ../../source/operator/index.rst:87
# 937c3a30953d4013ab4f285cbf099b7f
msgid "Arithmetic Operators"
msgstr ""

#: ../../source/operator/index.rst:89
# 0c4cb464299445fcb212624f3bcd2b9d
msgid "The arithmetic operators for manipulating numerical values are also supported."
msgstr ""

#: ../../source/operator/index.rst:0
# c92fdf18e100444293b55823d928b1ab
msgid "operator_math.py"
msgstr ""

#: ../../source/operator/index.rst:96
# a03752d1369d45c3b5a4854166690e8a
msgid "There are two separate division operators: ``floordiv()`` (integer division as implemented in Python before version 3.0) and ``truediv()`` (floating point division)."
msgstr ""

#: ../../source/operator/index.rst:144
# ada619a1e6074deaa0f8e6d1f099fd8a
msgid "Sequence Operators"
msgstr ""

#: ../../source/operator/index.rst:146
# 3d4f4dca68964f6eb8e959e04add1808
msgid "The operators for working with sequences can be divided into four groups: building up sequences, searching for items, accessing contents, and removing items from sequences."
msgstr ""

#: ../../source/operator/index.rst:0
# b342d35ea019456f8c36cf9188149093
msgid "operator_sequences.py"
msgstr ""

#: ../../source/operator/index.rst:154
# b92ea0dea87d48379299a8eccf49250f
msgid "Some of these operations, such as ``setitem()`` and ``delitem()``, modify the sequence in place and do not return a value."
msgstr ""

#: ../../source/operator/index.rst:191
# b6d898688aff4f31bf8a19b84de5a1ad
msgid "In-place Operators"
msgstr ""

#: ../../source/operator/index.rst:193
# ad44d696c51b42cab636e04f92bdb137
msgid "In addition to the standard operators, many types of objects support \"in-place\" modification through special operators such as ``+=``. There are equivalent functions for in-place modifications, too:"
msgstr ""

#: ../../source/operator/index.rst:0
# 0c3640c0d9fe4d238904655daa2715f5
msgid "operator_inplace.py"
msgstr ""

#: ../../source/operator/index.rst:202
# 0b7d7d48c1db4a8395c205349f71e791
msgid "These examples only demonstrate a few of the functions. Refer to the standard library documentation for complete details."
msgstr ""

#: ../../source/operator/index.rst:225
# 89316d801b424aab933fe46f0cf59621
msgid "Attribute and Item \"Getters\""
msgstr ""

#: ../../source/operator/index.rst:227
# b5c55aa59aea41e39cccdf296f176f2d
msgid "One of the most unusual features of the ``operator`` module is the concept of *getters*. These are callable objects constructed at runtime to retrieve attributes of objects or contents from sequences. Getters are especially useful when working with iterators or generator sequences, where they are intended to incur less overhead than a ``lambda`` or Python function."
msgstr ""

#: ../../source/operator/index.rst:0
# 65d6a54c48c0428981ee666ccd31a1c5
msgid "operator_attrgetter.py"
msgstr ""

#: ../../source/operator/index.rst:238
# 48e9c4fbe6e644e0b147d3b2d0571ae0
msgid "Attribute getters work like ``lambda x, n='attrname': getattr(x, n)``:"
msgstr ""

#: ../../source/operator/index.rst:255
# 42ea275124af4221816e2fae842c1497
msgid "Item getters work like ``lambda x, y=5: x[y]``:"
msgstr ""

#: ../../source/operator/index.rst:0
# 4bbf74483b9a424ea5f8f003e0325970
msgid "operator_itemgetter.py"
msgstr ""

#: ../../source/operator/index.rst:261
# b3bb997aaec74eb48475c2d6acdb0a5e
msgid "Item getters work with mappings as well as sequences."
msgstr ""

#: ../../source/operator/index.rst:284
# 80ef6c222d5848b6a687ad07c5b35d5e
msgid "Combining Operators and Custom Classes"
msgstr ""

#: ../../source/operator/index.rst:286
# 80ba2087aaf04c59a5780e1b9c8d7b7d
msgid "The functions in the ``operator`` module work via the standard Python interfaces for their operations, so they work with user-defined classes as well as the built-in types."
msgstr ""

#: ../../source/operator/index.rst:0
# 48f1cf12ac8e4a4baf19f5919f2a0c15
msgid "operator_classes.py"
msgstr ""

#: ../../source/operator/index.rst:294
# c4862035ebf247b0b0b2acaa48a2e0ac
msgid "Refer to the Python reference guide for a complete list of the special methods used by each operator."
msgstr ""

#: ../../source/operator/index.rst:318
# 1a2874864d6d4c8d8b45438cb7a9e13a
msgid ":pydoc:`operator`"
msgstr ""

#: ../../source/operator/index.rst:320
# 6027de56a2af4dde9cc06e52852db8cb
msgid ":mod:`functools` -- Functional programming tools, including the ``total_ordering()`` decorator for adding rich comparison methods to a class."
msgstr ""

#: ../../source/operator/index.rst:324
# 043de30969d14ef99a26ea0df29b64df
msgid ":mod:`itertools` -- Iterator operations."
msgstr ""

#: ../../source/operator/index.rst:326
# e644614c1eb144289eaa26089f8c1c5a
msgid ":mod:`collections` -- Abstract types for collections."
msgstr ""

#: ../../source/operator/index.rst:328
# c74152fb77f2400cb022c694903c2d16
msgid ":mod:`numbers` -- Abstract types for numerical values."
msgstr ""

