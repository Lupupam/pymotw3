# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sched/index.rst:3
# c04b4fbcd13a4fd3804acd6bb7a1da82
msgid "sched --- Timed Event Scheduler"
msgstr ""

#: ../../source/sched/index.rst:8
# c35e62fa9cf2487ba6ec9e1643752e33
msgid "Generic event scheduler."
msgstr ""

#: ../../source/sched/index.rst:10
# b6d19105bf854c3aaf91cb9298ed9106
msgid "The ``sched`` module implements a generic event scheduler for running tasks at specific times. The scheduler class uses a ``time`` function to learn the current time, and a ``delay`` function to wait for a specific period of time. The actual units of time are not important, which makes the interface flexible enough to be used for many purposes."
msgstr ""

#: ../../source/sched/index.rst:17
# 0f5e75ec62404e2dbd7726cf80292945
msgid "The ``time`` function is called without any arguments, and should return a number representing the current time. The ``delay`` function is called with a single integer argument, using the same scale as the time function, and should wait that many time units before returning. By default ``monotonic()`` and ``sleep()`` from :mod:`time` are used, but the examples in this section use ``time.time()``, which also meets the requirements, because it makes the output easier to understand."
msgstr ""

#: ../../source/sched/index.rst:26
# 7a5c7689206049c2a2d305a94e0a596b
msgid "To support multi-threaded applications, the delay function is called with argument 0 after each event is generated, to ensure that other threads also have a chance to run."
msgstr ""

#: ../../source/sched/index.rst:31
# faee4087d9ee41b5aa6cdbe3366182c0
msgid "Running Events With a Delay"
msgstr ""

#: ../../source/sched/index.rst:33
# 93581f79d08746ae856686e6f7bee6ce
msgid "Events can be scheduled to run after a delay, or at a specific time. To schedule them with a delay, use the ``enter()`` method, which takes four arguments."
msgstr ""

#: ../../source/sched/index.rst:37
# 6b5e49fe4f9c402fbdf27d26d7abf6d4
msgid "A number representing the delay"
msgstr ""

#: ../../source/sched/index.rst:38
# 0797367a3aa74bb8a0ad083d73b7bf20
msgid "A priority value"
msgstr ""

#: ../../source/sched/index.rst:39
# 4adf8337d83246ec9c49da83a8fb9bf3
msgid "The function to call"
msgstr ""

#: ../../source/sched/index.rst:40
# b51a8e0f184d49a5908b6ce1b94ec3d9
msgid "A tuple of arguments for the function"
msgstr ""

#: ../../source/sched/index.rst:42
# c8415d89e12146e4948ff6791e83058d
msgid "This example schedules two different events to run after two and three seconds respectively. When the event's time comes up, ``print_event()`` is called and prints the current time and the name argument passed to the event."
msgstr ""

#: ../../source/sched/index.rst:0
# e308487b65eb467f87db32f0d8dfbb86
msgid "sched_basic.py"
msgstr ""

#: ../../source/sched/index.rst:51
# 0e2a658226774a7ca01d1180f7853fb3
msgid "Running the program produces:"
msgstr ""

#: ../../source/sched/index.rst:67
# 4fe51d22096f48a7b35e918ed19b5f25
msgid "The time printed for the first event is two seconds after start, and the time for the second event is three seconds after start."
msgstr ""

#: ../../source/sched/index.rst:71
# 6d163287f5934b988e58491f684b6f9a
msgid "Overlapping Events"
msgstr ""

#: ../../source/sched/index.rst:73
# fc3b1d16ccd545e18e7bbac564e995a8
msgid "The call to ``run()`` blocks until all of the events have been processed. Each event is run in the same thread, so if an event takes longer to run than the delay between events, there will be overlap. The overlap is resolved by postponing the later event. No events are lost, but some events may be called later than they were scheduled. In the next example, ``long_event()`` sleeps but it could just as easily delay by performing a long calculation or by blocking on I/O."
msgstr ""

#: ../../source/sched/index.rst:0
# 0bb457465eae48ff8b812d6e6656eb7b
msgid "sched_overlap.py"
msgstr ""

#: ../../source/sched/index.rst:86
# edbdc3d7b7c8461a87ba5ed691120e97
msgid "The result is the second event is run immediately after the first finishes, since the first event took long enough to push the clock past the desired start time of the second event."
msgstr ""

#: ../../source/sched/index.rst:108
# 30692079421c434b886a72c0a5d02711
msgid "Event Priorities"
msgstr ""

#: ../../source/sched/index.rst:110
# 8d4ab4d9e91f4791ac859643fa9fc144
msgid "If more than one event is scheduled for the same time their priority values are used to determine the order they are run."
msgstr ""

#: ../../source/sched/index.rst:0
# c685211b867b4aa598043c9668824c4b
msgid "sched_priority.py"
msgstr ""

#: ../../source/sched/index.rst:117
# 889deae07ade4cbc826ad518007fe1ef
msgid "This example needs to ensure that they are scheduled for the exact same time, so the ``enterabs()`` method is used instead of ``enter()``. The first argument to ``enterabs()`` is the time to run the event, instead of the amount of time to delay."
msgstr ""

#: ../../source/sched/index.rst:138
# a6b2108675e8485aa568b58a0f268931
msgid "Canceling Events"
msgstr ""

#: ../../source/sched/index.rst:140
# 9e952596902045a1935d9df38c8283ee
msgid "Both ``enter()`` and ``enterabs()`` return a reference to the event that can be used to cancel it later. Because ``run()`` blocks, the event has to be canceled in a different thread. For this example, a thread is started to run the scheduler and the main processing thread is used to cancel the event."
msgstr ""

#: ../../source/sched/index.rst:0
# 8ac98bac25e547338c25eef1aaa96e99
msgid "sched_cancel.py"
msgstr ""

#: ../../source/sched/index.rst:150
# 020a93e06a3045548e02301fcb6fac41
msgid "Two events were scheduled, but the first was later canceled. Only the second event runs, so the counter variable is only incremented one time."
msgstr ""

#: ../../source/sched/index.rst:172
# 58cd7c8528dc44b38a48a4daa8025b8d
msgid ":pydoc:`sched`"
msgstr ""

#: ../../source/sched/index.rst:174
# bec3a71d2f3d487d9cfdc268db214eee
msgid ":mod:`time` -- The ``time`` module."
msgstr ""

