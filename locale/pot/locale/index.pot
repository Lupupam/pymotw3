# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 20:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/locale/index.rst:3
# 922605a5949a43ba9800dca63386cab4
msgid "locale --- Cultural Localization API"
msgstr ""

#: ../../source/locale/index.rst:8
# df254e40b73240a4a847756a7c8bec83
msgid "Format and parse values that depend on location or language."
msgstr ""

#: ../../source/locale/index.rst:10
# 65e176ab15754635b0e7c84704ef8e79
msgid "The ``locale`` module is part of Python's internationalization and localization support library. It provides a standard way to handle operations that may depend on the language or location of a user. For example, it handles formatting numbers as currency, comparing strings for sorting, and working with dates. It does not cover translation (see the :mod:`gettext` module) or Unicode encoding (see the :mod:`codecs` module)."
msgstr ""

#: ../../source/locale/index.rst:20
# 08b7237fb70b47b1b4a9b44a5feee1cd
msgid "Changing the locale can have application-wide ramifications, so the recommended practice is to avoid changing the value in a library and to let the application set it one time. In the examples in this section, the locale is changed several times within a short program to highlight the differences in the settings of various locales. It is far more likely that an application will set the locale once as it starts up or when a web request is received and not change it."
msgstr ""

#: ../../source/locale/index.rst:28
# 3a2242eed35244c0becc9aa72284d181
msgid "This section covers some of the high-level functions in the ``locale`` module. There are others which are lower level (``format_string()``) or which relate to managing the locale for an application (``resetlocale()``)."
msgstr ""

#: ../../source/locale/index.rst:34
# 38f07d85104040e38012ad50cf84ef6d
msgid "Probing the Current Locale"
msgstr ""

#: ../../source/locale/index.rst:36
# de844a84a09147d2baba5062c3e772c9
msgid "The most common way to let the user change the locale settings for an application is through an environment variable (``LC_ALL``, ``LC_CTYPE``, ``LANG``, or ``LANGUAGE``, depending on the platform). The application then calls ``setlocale()`` without a hard-coded value, and the environment value is used."
msgstr ""

#: ../../source/locale/index.rst:0
# 90ba04c13a05442fb866dbb5094110cf
msgid "locale_env.py"
msgstr ""

#: ../../source/locale/index.rst:46
# 94bb1e1e6ae44db58af4c52caad7e51b
msgid "The ``localeconv()`` method returns a dictionary containing the locale's conventions.  The full list of value names and definitions is covered in the standard library documentation."
msgstr ""

#: ../../source/locale/index.rst:50
# de96b13906af4d4a9f4101c621c9e535
msgid "A Mac running OS X 10.11.6 with all of the variables unset produces this output:"
msgstr ""

#: ../../source/locale/index.rst:96
# 1b4a5a0512094cc78769c6631027fca7
msgid "Running the same script with the ``LANG`` variable set shows how the locale and default encoding change."
msgstr ""

#: ../../source/locale/index.rst:99
# 5763a91286cf4bf99fde4442f50a19e7
msgid "The United States (``en_US``):"
msgstr ""

#: ../../source/locale/index.rst:144
# ea646fcaa78a4d9a811c478fafb3b8d0
msgid "France (``fr_FR``):"
msgstr ""

#: ../../source/locale/index.rst:190
# c6b4ce1ab77c45c38ea597b5672f6f81
msgid "Spain (``es_ES``):"
msgstr ""

#: ../../source/locale/index.rst:236
# ce1e0081479941e69e0ce6abafc7ba67
msgid "Portugal (``pt_PT``):"
msgstr ""

#: ../../source/locale/index.rst:283
# aea62033a3b0496791d8414d3fa7716f
msgid "Poland (``pl_PL``):"
msgstr ""

#: ../../source/locale/index.rst:331
# bb7b2ada7b2e4da78dd40a9698dd25db
msgid "Currency"
msgstr ""

#: ../../source/locale/index.rst:333
# d2abbde4229e4d9e9146672b470bf83b
msgid "The earlier example output shows that changing the locale updates the currency symbol setting and the character to separate whole numbers from decimal fractions.  This example loops through several different locales to print a positive and negative currency value formatted for each locale."
msgstr ""

#: ../../source/locale/index.rst:0
# 96f30def65b843cab6b26a0e3ddb3adb
msgid "locale_currency.py"
msgstr ""

#: ../../source/locale/index.rst:343
# ff5daf920d714fc595fffaf987305263
msgid "The output is this small table:"
msgstr ""

#: ../../source/locale/index.rst:362
# 635d038361fc461fb3da8d1df0a1941e
msgid "Formatting Numbers"
msgstr ""

#: ../../source/locale/index.rst:364
# 2648f606de5743ccb096d6d3259d5a86
msgid "Numbers not related to currency are also formatted differently depending on the locale.  In particular, the ``grouping`` character used to separate large numbers into readable chunks changes."
msgstr ""

#: ../../source/locale/index.rst:0
# 7abd2bb6be844e3184a38fc5bd1bb315
msgid "locale_grouping.py"
msgstr ""

#: ../../source/locale/index.rst:372
# 2d627595da534948b6c679ae00feeb59
msgid "To format numbers without the currency symbol, use ``format()`` instead of ``currency()``."
msgstr ""

#: ../../source/locale/index.rst:392
# 36f3bd729a1a4851a88494e3820dc54e
msgid "To convert locale-formatted numbers to a normalized locale-agnostic format, use ``delocalize()``."
msgstr ""

#: ../../source/locale/index.rst:0
# c394310f7e1c4682b2a767752e5a6648
msgid "locale_delocalize.py"
msgstr ""

#: ../../source/locale/index.rst:399
# 84310792c0d84f259b69bcb4041b1b27
msgid "Grouping punctuation is removed and the decimal separator is converted to always be a ``.``."
msgstr ""

#: ../../source/locale/index.rst:421
# 6e7ec614a05543ac8e3d190ac15d71de
msgid "Parsing Numbers"
msgstr ""

#: ../../source/locale/index.rst:423
# 938e551541504f1d8a6e8cb1dd3981ac
msgid "Besides generating output in different formats, the ``locale`` module helps with parsing input. It includes ``atoi()`` and ``atof()`` functions for converting the strings to integer and floating point values based on the locale's numerical formatting conventions."
msgstr ""

#: ../../source/locale/index.rst:0
# 8de0ccdaf76644cd8efbcabac52764b5
msgid "locale_atof.py"
msgstr ""

#: ../../source/locale/index.rst:433
# fc95b701a80f40a3971b2e8eafd6b0d9
msgid "The grouping and decimal separator values of the locale are recognized by the parser."
msgstr ""

#: ../../source/locale/index.rst:454
# eedf52e6ac1d4f5e9cc3a3cdcf73e2ac
msgid "Dates and Times"
msgstr ""

#: ../../source/locale/index.rst:456
# 9f33df34b4454e19af6ff814268de31e
msgid "Another important aspect of localization is date and time formatting."
msgstr ""

#: ../../source/locale/index.rst:0
# 06f3328a88434666ace8bc0e9738949f
msgid "locale_date.py"
msgstr ""

#: ../../source/locale/index.rst:462
# 0d8998f4ef544c79b3a44b09c234a9c9
msgid "This example uses the date formatting string for the locale to print the current date and time."
msgstr ""

#: ../../source/locale/index.rst:483
# 132a2a79c853455d94400d2b192e4a29
msgid ":pydoc:`locale`"
msgstr ""

#: ../../source/locale/index.rst:485
# 5d258b932ad542a9a515fc9798883044
msgid ":ref:`Python 2 to 3 porting notes for locale <porting-locale>`"
msgstr ""

#: ../../source/locale/index.rst:487
# 0c2116389aea4826b64168d1bd12503e
msgid ":mod:`gettext` -- Message catalogs for translations."
msgstr ""

